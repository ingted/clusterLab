'\" t
.\"     Title: crm
.\"    Author: [see the "AUTHORS" section]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/07/2015
.\"    Manual: crmsh documentation
.\"    Source: crm 1.3.0
.\"  Language: English
.\"
.TH "CRM" "8" "11/07/2015" "crm 1\&.3\&.0" "crmsh documentation"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
crm \- Pacemaker command line interface for configuration and management
.SH "SYNOPSIS"
.sp
\fBcrm\fR [OPTIONS] [SUBCOMMAND ARGS\&...]
.SH "DESCRIPTION"
.sp
The crm shell is a command\-line based cluster configuration and management tool\&. Its goal is to assist as much as possible with the configuration and maintenance of Pacemaker\-based High Availability clusters\&.
.sp
crm works both as a command\-line tool to be called directly from the system shell, and as an interactive shell with extensive tab completion and help\&.
.sp
The primary focus of the crm shell is to provide a simplified and consistent interface to Pacemaker, but it also provides tools for managing the creation and configuration of High Availability clusters from scratch\&. To learn more about this aspect of crm, see the cluster section below\&.
.sp
The Pacemaker configuration is stored in something called a CIB file, where CIB stands for Cluster Information Base\&. The CIB is a set of instructions coded in XML which is synchronized across the cluster\&.
.sp
Editing the CIB is a challenge, not only due to its complexity and wide variety of options, but also because XML is more computer than user friendly\&. To help with this task, the crm shell provides a small and simple line\-oriented configuration language consistent with the other commands available in the shell\&. For more information about this language and how to use it, see the configure section below\&.
.sp
crm provides a consistent and well\-documented interface to most of the management tools included in Pacemaker, for example crm_resource(8) or crm_attribute(8)\&. Instead of having to remember the various flags and options available for each tool, crm hides all of the arcane detail\&.
.sp
crm can also function as a cluster scripting tool, and can be fed multi\-line sets of commands either directly from standard input or via a file\&. Templates with ready made configurations may help newbies learn about the cluster configuration or facilitate testing procedures\&.
.sp
The crm shell is line oriented: every command must start and finish on the same line\&. It is possible to use a continuation character (\e) to write one command in two or more lines\&. The continuation character is commonly used when displaying configurations\&.
.SH "OPTIONS"
.PP
\fB\-f, \-\-file\fR=\fIFILE\fR
.RS 4
Load commands from the given file\&. If a dash
\-
is used in place of a file name,
crm
will read commands from the shell standard input (stdin)\&.
.RE
.PP
\fB\-c, \-\-cib\fR=\fICIB\fR
.RS 4
Start the session using the given shadow CIB file\&. Equivalent to
cib use <CIB>\&.
.RE
.PP
\fB\-D, \-\-display=\fR\fIOUTPUT_TYPE\fR
.RS 4
Choose one of the output options:
plain,
color, or
uppercase\&. The default is
color
if the terminal emulation supports colors\&. Otherwise,
plain
is used\&.
.RE
.PP
\fB\-F, \-\-force\fR
.RS 4
Make
crm
proceed with applying changes where it would normally ask the user to confirm before proceeding\&. This option is mainly useful in scripts, and should be used with care\&.
.RE
.PP
\fB\-w, \-\-wait\fR
.RS 4
Make
crm
wait for the cluster transition to finish (for the changes to take effect) after each processed line\&.
.RE
.PP
\fB\-H, \-\-history\fR=\fIDIR|FILE\fR
.RS 4
The
history
commands can either work directly on the live cluster (default), or on a report generated by the
report
command\&. Use this option to specify a directory or file containing the previously generated report\&.
.RE
.PP
\fB\-h, \-\-help\fR
.RS 4
Print help page\&.
.RE
.PP
\fB\-\-version\fR
.RS 4
Print crmsh version and build information (Mercurial Hg changeset hash)\&.
.RE
.PP
\fB\-d, \-\-debug\fR
.RS 4
Print verbose debugging information\&.
.RE
.PP
\fB\-R, \-\-regression\-tests\fR
.RS 4
Enables extra verbose trace logging used by the regression tests\&. Logs all external calls made by crmsh\&.
.RE
.PP
\fB\-\-scriptdir\fR=\fIDIR\fR
.RS 4
Extra directory where crm looks for cluster scripts\&. Can be a semi\-colon separated list of directories\&.
.RE
.SH "INTRODUCTION"
.sp
This section of the user guide covers general topics about the user interface and describes some of the features of crmsh in detail\&.
.SS "User interface"
.sp
The main purpose of crmsh is to provide a simple yet powerful interface to the cluster stack\&. There are two main modes of operation with the user interface of crmsh:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Command line (single\-shot) use \- Use
crm
as a regular UNIX command from your usual shell\&.
crm
has full bash completion built in, so using it in this manner should be as comfortable and familiar as using any other command\-line tool\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Interactive mode \- By calling
crm
without arguments, or by calling it with only a sublevel as argument,
crm
enters the interactive mode\&. In this mode, it acts as its own command shell, which remembers which sublevel you are currently in and allows for rapid and convenient execution of multiple commands within the same sublevel\&. This mode also has full tab completion, as well as built\-in interactive help and syntax highlighting\&.
.RE
.sp
Here are a few examples of using crm both as a command\-line tool and as an interactive shell:
.PP
\fBCommand line (one-shot) use:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
# crm resource stop www_app
.fi
.if n \{\
.RE
.\}
.PP
\fBInteractive use:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
# crm
crm(live)# resource
crm(live)resource# unmanage tetris_1
crm(live)resource# up
crm(live)# node standby node4
.fi
.if n \{\
.RE
.\}
.PP
\fBCluster configuration:\fR. 
.sp
.if n \{\
.RS 4
.\}
.nf
# crm configure<<EOF
  #
  # resources
  #
  primitive disk0 iscsi \e
    params portal=192\&.168\&.2\&.108:3260 target=iqn\&.2008\-07\&.com\&.suse:disk0
  primitive fs0 Filesystem \e
    params device=/dev/disk/by\-label/disk0 directory=/disk0 fstype=ext3
  primitive internal_ip IPaddr params ip=192\&.168\&.1\&.101
  primitive apache apache \e
    params configfile=/disk0/etc/apache2/site0\&.conf
  primitive apcfence stonith:apcsmart \e
    params ttydev=/dev/ttyS0 hostlist="node1 node2" \e
    op start timeout=60s
  primitive pingd pingd \e
    params name=pingd dampen=5s multiplier=100 host_list="r1 r2"
  #
  # monitor apache and the UPS
  #
  monitor apache 60s:30s
  monitor apcfence 120m:60s
  #
  # cluster layout
  #
  group internal_www \e
    disk0 fs0 internal_ip apache
  clone fence apcfence \e
    meta globally\-unique=false clone\-max=2 clone\-node\-max=1
  clone conn pingd \e
    meta globally\-unique=false clone\-max=2 clone\-node\-max=1
  location node_pref internal_www \e
    rule 50: #uname eq node1 \e
    rule pingd: defined pingd
  #
  # cluster properties
  #
  property stonith\-enabled=true
  commit
EOF
.fi
.if n \{\
.RE
.\}
.sp
The crm interface is hierarchical, with commands organized into separate levels by functionality\&. To list the available levels and commands, either execute help <level>, or, if at the top level of the shell, simply typing help will provide an overview of all available levels and commands\&.
.sp
The (live) string in the crm prompt signifies that the current CIB in use is the cluster live configuration\&. It is also possible to work with so\-called shadow CIBs\&. These are separate, inactive configurations stored in files, that can be applied and thereby replace the live configuration at any time\&.
.SS "Tab completion"
.sp
The crm makes extensive use of tab completion\&. The completion is both static (i\&.e\&. for crm commands) and dynamic\&. The latter takes into account the current status of the cluster or information from installed resource agents\&. Sometimes, completion may also be used to get short help on resource parameters\&. Here are a few examples:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)resource# <TAB><TAB>
bye           failcount     move          restart       unmigrate
cd            help          param         show          unmove
cleanup       list          promote       start         up
demote        manage        quit          status        utilization
end           meta          refresh       stop
exit          migrate       reprobe       unmanage

crm(live)configure# primitive fence\-1 <TAB><TAB>
heartbeat:  lsb:    ocf:    stonith:

crm(live)configure# primitive fence\-1 stonith:<TAB><TAB>
apcmaster                external/ippower9258     fence_legacy
apcmastersnmp            external/kdumpcheck      ibmhmc
apcsmart                 external/libvirt         ipmilan

crm(live)configure# primitive fence\-1 stonith:ipmilan params <TAB><TAB>
auth=      hostname=  ipaddr=    login=     password=  port=      priv=

crm(live)configure# primitive fence\-1 stonith:ipmilan params auth=<TAB><TAB>
auth* (string)
    The authorization type of the IPMI session ("none", "straight", "md2", or "md5")
.fi
.if n \{\
.RE
.\}
.sp
crmsh also comes with bash completion usable directly from the system shell\&. This should be installed automatically with the command itself\&.
.SH "FEATURES"
.sp
The feature set of crmsh covers a wide range of functionality, and understanding how and when to use the various features of the shell can be difficult\&. This section of the guide describes some of the features and use cases of crmsh in more depth\&. The intention is to provide a deeper understanding of these features, but also to serve as a guide to using them\&.
.SS "Shadow CIB usage"
.sp
A Shadow CIB is a normal cluster configuration stored in a file\&. They may be manipulated in much the same way as the \fIlive\fR CIB, with the key difference that changes to a shadow CIB have no effect on the actual cluster resources\&. An administrator may choose to apply any of them to the cluster, thus replacing the running configuration with the one found in the shadow CIB\&.
.sp
The crm prompt always contains the name of the configuration which is currently in use, or the string \fIlive\fR if using the live cluster configuration\&.
.sp
When editing the configuration in the configure level, no changes are actually applied until the commit command is executed\&. It is possible to start editing a configuration as usual, but instead of committing the changes to the active CIB, save them to a shadow CIB\&.
.sp
The following example configure session demonstrates how this can be done:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# cib new test\-2
INFO: test\-2 shadow CIB created
crm(test\-2)configure# commit
.fi
.if n \{\
.RE
.\}
.SS "Configuration semantic checks"
.sp
Resource definitions may be checked against the meta\-data provided with the resource agents\&. These checks are currently carried out:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
are required parameters set
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
existence of defined parameters
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
timeout values for operations
.RE
.sp
The parameter checks are obvious and need no further explanation\&. Failures in these checks are treated as configuration errors\&.
.sp
The timeouts for operations should be at least as long as those recommended in the meta\-data\&. Too short timeout values are a common mistake in cluster configurations and, even worse, they often slip through if cluster testing was not thorough\&. Though operation timeouts issues are treated as warnings, make sure that the timeouts are usable in your environment\&. Note also that the values given are just \fIadvisory minimum\fR\-\-\-your resources may require longer timeouts\&.
.sp
User may tune the frequency of checks and the treatment of errors by the check\-frequency and check\-mode preferences\&.
.sp
Note that if the check\-frequency is set to always and the check\-mode to strict, errors are not tolerated and such configuration cannot be saved\&.
.SS "Configuration templates"
.sp
Configuration templates are ready made configurations created by cluster experts\&. They are designed in such a way so that users may generate valid cluster configurations with minimum effort\&. If you are new to Pacemaker, templates may be the best way to start\&.
.sp
We will show here how to create a simple yet functional Apache configuration:
.sp
.if n \{\
.RS 4
.\}
.nf
# crm configure
crm(live)configure# template
crm(live)configure template# list templates
apache       filesystem   virtual\-ip
crm(live)configure template# new web <TAB><TAB>
apache       filesystem   virtual\-ip
crm(live)configure template# new web apache
INFO: pulling in template apache
INFO: pulling in template virtual\-ip
crm(live)configure template# list
web2\-d       web2     vip2     web3     vip      web
.fi
.if n \{\
.RE
.\}
.sp
We enter the template level from configure\&. Use the list command to show templates available on the system\&. The new command creates a configuration from the apache template\&. You can use tab completion to pick templates\&. Note that the apache template depends on a virtual IP address which is automatically pulled along\&. The list command shows the just created web configuration, among other configurations (I hope that you, unlike me, will use more sensible and descriptive names)\&.
.sp
The show command, which displays the resulting configuration, may be used to get an idea about the minimum required changes which have to be done\&. All ERROR messages show the line numbers in which the respective parameters are to be defined:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure template# show
ERROR: 23: required parameter ip not set
ERROR: 61: required parameter id not set
ERROR: 65: required parameter configfile not set
crm(live)configure template# edit
.fi
.if n \{\
.RE
.\}
.sp
The edit command invokes the preferred text editor with the web configuration\&. At the top of the file, the user is advised how to make changes\&. A good template should require from the user to specify only parameters\&. For example, the web configuration we created above has the following required and optional parameters (all parameter lines start with %%):
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep \-n ^%% ~/\&.crmconf/web
23:%% ip
31:%% netmask
35:%% lvs_support
61:%% id
65:%% configfile
71:%% options
76:%% envfiles
.fi
.if n \{\
.RE
.\}
.sp
These lines are the only ones that should be modified\&. Simply append the parameter value at the end of the line\&. For instance, after editing this template, the result could look like this (we used tabs instead of spaces to make the values stand out):
.sp
.if n \{\
.RS 4
.\}
.nf
$ grep \-n ^%% ~/\&.crmconf/web
23:%% ip        192\&.168\&.1\&.101
31:%% netmask
35:%% lvs_support
61:%% id        websvc
65:%% configfile    /etc/apache2/httpd\&.conf
71:%% options
76:%% envfiles
.fi
.if n \{\
.RE
.\}
.sp
As you can see, the parameter line format is very simple:
.sp
.if n \{\
.RS 4
.\}
.nf
%% <name> <value>
.fi
.if n \{\
.RE
.\}
.sp
After editing the file, use show again to display the configuration:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure template# show
primitive virtual\-ip IPaddr \e
    params ip=192\&.168\&.1\&.101
primitive apache apache \e
    params configfile="/etc/apache2/httpd\&.conf"
monitor apache 120s:60s
group websvc \e
    apache virtual\-ip
.fi
.if n \{\
.RE
.\}
.sp
The target resource of the apache template is a group which we named websvc in this sample session\&.
.sp
This configuration looks exactly as you could type it at the configure level\&. The point of templates is to save you some typing\&. It is important, however, to understand the configuration produced\&.
.sp
Finally, the configuration may be applied to the current crm configuration (note how the configuration changed slightly, though it is still equivalent, after being digested at the configure level):
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure template# apply
crm(live)configure template# cd \&.\&.
crm(live)configure# show
node xen\-b
node xen\-c
primitive apache apache \e
    params configfile="/etc/apache2/httpd\&.conf" \e
    op monitor interval=120s timeout=60s
primitive virtual\-ip IPaddr \e
    params ip=192\&.168\&.1\&.101
group websvc apache virtual\-ip
.fi
.if n \{\
.RE
.\}
.sp
Note that this still does not commit the configuration to the CIB which is used in the shell, either the running one (live) or some shadow CIB\&. For that you still need to execute the commit command\&.
.sp
To complete our example, we should also define the preferred node to run the service:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# location websvc\-pref websvc 100: xen\-b
.fi
.if n \{\
.RE
.\}
.sp
If you are not happy with some resource names which are provided by default, you can rename them now:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# rename virtual\-ip intranet\-ip
crm(live)configure# show
node xen\-b
node xen\-c
primitive apache apache \e
    params configfile="/etc/apache2/httpd\&.conf" \e
    op monitor interval=120s timeout=60s
primitive intranet\-ip IPaddr \e
    params ip=192\&.168\&.1\&.101
group websvc apache intranet\-ip
location websvc\-pref websvc 100: xen\-b
.fi
.if n \{\
.RE
.\}
.sp
To summarize, working with templates typically consists of the following steps:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
new: create a new configuration from templates
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
edit: define parameters, at least the required ones
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
show: see if the configuration is valid
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
apply: apply the configuration to the
configure
level
.RE
.SS "Resource testing"
.sp
The amount of detail in a cluster makes all configurations prone to errors\&. By far the largest number of issues in a cluster is due to bad resource configuration\&. The shell can help quickly diagnose such problems\&. And considerably reduce your keyboard wear\&.
.sp
Let\(cqs say that we entered the following configuration:
.sp
.if n \{\
.RS 4
.\}
.nf
node xen\-b
node xen\-c
node xen\-d
primitive fencer stonith:external/libvirt \e
    params hypervisor_uri="qemu+tcp://10\&.2\&.13\&.1/system" \e
        hostlist="xen\-b xen\-c xen\-d" \e
    op monitor interval=2h
primitive svc Xinetd \e
    params service=systat \e
    op monitor interval=30s
primitive intranet\-ip IPaddr2 \e
    params ip=10\&.2\&.13\&.100 \e
    op monitor interval=30s
primitive apache apache \e
    params configfile="/etc/apache2/httpd\&.conf" \e
    op monitor interval=120s timeout=60s
group websvc apache intranet\-ip
location websvc\-pref websvc 100: xen\-b
.fi
.if n \{\
.RE
.\}
.sp
Before typing commit to submit the configuration to the cib we can make sure that all resources are usable on all nodes:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# rsctest websvc svc fencer
.fi
.if n \{\
.RE
.\}
.sp
It is important that resources being tested are not running on any nodes\&. Otherwise, the rsctest command will refuse to do anything\&. Of course, if the current configuration resides in a CIB shadow, then a commit is irrelevant\&. The point being that resources are not running on any node\&.
\fBNote on stopping all resources\fR
.sp
Alternatively to not committing a configuration, it is also possible to tell Pacemaker not to start any resources:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# property stop\-all\-resources=yes
.fi
.if n \{\
.RE
.\}
.sp
Almost none\-\-\-resources of class stonith are still started\&. But shell is not as strict when it comes to stonith resources\&.
.sp
Order of resources is significant insofar that a resource depends on all resources to its left\&. In most configurations, it\(cqs probably practical to test resources in several runs, based on their dependencies\&.
.sp
Apart from groups, crm does not interpret constraints and therefore knows nothing about resource dependencies\&. It also doesn\(cqt know if a resource can run on a node at all in case of an asymmetric cluster\&. It is up to the user to specify a list of eligible nodes if a resource is not meant to run on every node\&.
.SS "Access Control Lists (ACL)"
\fBNote on ACLs in Pacemaker 1.1.12\fR
.sp
The support for ACLs has been revised in Pacemaker version 1\&.1\&.12 and up\&. Depending on which version you are using, the information in this section may no longer be accurate\&. Look for the acl_target and acl_group configuration elements for more details on the new syntax\&.
.sp
By default, the users from the haclient group have full access to the cluster (or, more precisely, to the CIB)\&. Access control lists allow for finer access control to the cluster\&.
.sp
Access control lists consist of an ordered set of access rules\&. Each rule allows read or write access or denies access completely\&. Rules are typically combined to produce a specific role\&. Then, users may be assigned a role\&.
.sp
For instance, this is a role which defines a set of rules allowing management of a single resource:
.sp
.if n \{\
.RS 4
.\}
.nf
role bigdb_admin \e
    write meta:bigdb:target\-role \e
    write meta:bigdb:is\-managed \e
    write location:bigdb \e
    read ref:bigdb
.fi
.if n \{\
.RE
.\}
.sp
The first two rules allow modifying the target\-role and is\-managed meta attributes which effectively enables users in this role to stop/start and manage/unmanage the resource\&. The constraints write access rule allows moving the resource around\&. Finally, the user is granted read access to the resource definition\&.
.sp
For proper operation of all Pacemaker programs, it is advisable to add the following role to all users:
.sp
.if n \{\
.RS 4
.\}
.nf
role read_all \e
    read cib
.fi
.if n \{\
.RE
.\}
.sp
For finer grained read access try with the rules listed in the following role:
.sp
.if n \{\
.RS 4
.\}
.nf
role basic_read \e
    read node attribute:uname \e
    read node attribute:type \e
    read property \e
    read status
.fi
.if n \{\
.RE
.\}
.sp
It is however possible that some Pacemaker programs (e\&.g\&. ptest) may not function correctly if the whole CIB is not readable\&.
.sp
Some of the ACL rules in the examples above are expanded by the shell to XPath specifications\&. For instance, meta:bigdb:target\-role expands to:
.sp
.if n \{\
.RS 4
.\}
.nf
//primitive[@id=\*(Aqbigdb\*(Aq]/meta_attributes/nvpair[@name=\*(Aqtarget\-role\*(Aq]
.fi
.if n \{\
.RE
.\}
.sp
You can see the expansion by showing XML:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live) configure# show xml bigdb_admin
\&.\&.\&.
<acls>
  <acl_role id="bigdb_admin">
      <write id="bigdb_admin\-write"
      xpath="//primitive[@id=\*(Aqbigdb\*(Aq]/meta_attributes/nvpair[@name=\*(Aqtarget\-role\*(Aq]"/>
.fi
.if n \{\
.RE
.\}
.sp
Many different XPath expressions can have equal meaning\&. For instance, the following two are equal, but only the first one is going to be recognized as shortcut:
.sp
.if n \{\
.RS 4
.\}
.nf
//primitive[@id=\*(Aqbigdb\*(Aq]/meta_attributes/nvpair[@name=\*(Aqtarget\-role\*(Aq]
//resources/primitive[@id=\*(Aqbigdb\*(Aq]/meta_attributes/nvpair[@name=\*(Aqtarget\-role\*(Aq]
.fi
.if n \{\
.RE
.\}
.sp
XPath is a powerful language, but you should try to keep your ACL xpaths simple and the builtin shortcuts should be used whenever possible\&.
.SS "Syntax: Resource sets"
.sp
Using resource sets can be a bit confusing unless one knows the details of the implementation in Pacemaker as well as how to interpret the syntax provided by crmsh\&.
.sp
Three different types of resource sets are provided by crmsh, and each one implies different values for the two resource set attributes, sequential and require\-all\&.
.PP
sequential
.RS 4
If true, the resources in the set do not depend on each other internally\&. Setting
sequential
to
true
implies a strict order of dependency within the set\&.
.RE
.PP
require\-all
.RS 4
If false, only one resource in the set is required to fulfil the requirements of the set\&. The set of A, B and C with
require\-all
set to
false
is be read as "A OR B OR C" when its dependencies are resolved\&.
.RE
.sp
The three types of resource sets modify the attributes in the following way:
.sp
.RS 4
.ie n \{\
\h'-04' 1.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  1." 4.2
.\}
Implicit sets (no brackets)\&.
sequential=true,
require\-all=true
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 2.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  2." 4.2
.\}
Parenthesis set ((
\&...
))\&.
sequential=false,
require\-all=true
.RE
.sp
.RS 4
.ie n \{\
\h'-04' 3.\h'+01'\c
.\}
.el \{\
.sp -1
.IP "  3." 4.2
.\}
Bracket set ([
\&...
])\&.
sequential=false,
require\-all=false
.RE
.sp
To create a set with the properties sequential=true and require\-all=false, explicitly set sequential in a bracketed set, [ A B C sequential=true ]\&.
.sp
To create multiple sets with both sequential and require\-all set to true, explicitly set sequential in a parenthesis set: A B ( C D sequential=true )\&.
.SS "Syntax: Attribute list references"
.sp
Attribute lists are used to set attributes and parameters for resources, constraints and property definitions\&. For example, to set the virtual IP used by an IPAddr resource the attribute ip can be set in an attribute list for that resource\&.
.sp
Attribute lists can have identifiers that name them, and other resources can reuse the same attribute list by referring to that name using an $id\-ref\&. For example, the following statement defines a simple dummy resource with an attribute list which sets the parameter state to the value 1 and sets the identifier for the attribute list to on\-state:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive dummy\-1 Dummy params $id=on\-state state=1
.fi
.if n \{\
.RE
.\}
.sp
To refer to this attribute list from a different resource, refer to the on\-state name using an id\-ref:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive dummy\-2 Dummy params $id\-ref=on\-state
.fi
.if n \{\
.RE
.\}
.sp
The resource dummy\-2 will now also have the parameter state set to the value 1\&.
.SS "Syntax: Attribute references"
.sp
In some cases, referencing complete attribute lists is too coarse\-grained, for example if two different parameters with different names should have the same value set\&. Instead of having to copy the value in multiple places, it is possible to create references to individual attributes in attribute lists\&.
.sp
To name an attribute in order to be able to refer to it later, prefix the attribute name with a $ character (as seen above with the special names $id and $id\-ref:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive dummy\-1 Dummy params $state=1
.fi
.if n \{\
.RE
.\}
.sp
The identifier state can now be used to refer to this attribute from other primitives, using the @<id> syntax:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive dummy\-2 Dummy params @state
.fi
.if n \{\
.RE
.\}
.sp
In some cases, using the attribute name as the identifier doesn\(cqt work due to name clashes\&. In this case, the syntax $<id>:<name>=<value> can be used to give the attribute a different identifier:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive dummy\-1 params $dummy\-state\-on:state=1
primitive dummy\-2 params @state
.fi
.if n \{\
.RE
.\}
.sp
There is also the possibility that two resources both use the same attribute value but with different names\&. For example, a web server may have a parameter server_ip for setting the IP address where it listens for incoming requests, and a virtual IP resource may have a parameter called ip which sets the IP address it creates\&. To configure these two resources with an IP without repeating the value, the reference can be given a name using the syntax @<id>:<name>\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive virtual\-ip IPaddr2 params $vip:ip=192\&.168\&.1\&.100
primitive webserver apache params @vip:server_ip
.fi
.if n \{\
.RE
.\}
.SH "COMMAND REFERENCE"
.sp
We define a small and simple language\&. Most commands consist of just a list of simple tokens\&. The only complex constructs are found at the configure level\&.
.sp
The syntax is described in a somewhat informal manner: <> denotes a string, [] means that the construct is optional, the ellipsis (\&.\&.\&.) signifies that the previous construct may be repeated, | means pick one of many, and the rest are literals (strings, :, =)\&.
.SS "status"
.sp
Show cluster status\&. The status is displayed by crm_mon\&. Supply additional arguments for more information or different format\&. See crm_mon(8) for more details\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status [<option> \&.\&.\&.]

option :: bynode | inactive | ops | timing | failcounts
.fi
.if n \{\
.RE
.\}
.SS "cluster"
.sp
Whole\-cluster configuration management with High Availability awareness\&.
.sp
The commands on the cluster level allows configuration and modification of the underlying cluster infrastructure, and also supplies tools to do whole\-cluster systems management\&.
.sp
These commands enable easy installation and maintenance of a HA cluster, by providing support for package installation, configuration of the cluster messaging layer, file system setup and more\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstart\fR
.RS 4
.sp
Starts the cluster\-related system services on this node\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
start
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstop\fR
.RS 4
.sp
Stops the cluster\-related system services on this node\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
stop
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinit\fR
.RS 4
.sp
Installs and configures a basic HA cluster on a set of nodes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
init node1 node2 node3
init \-\-dry\-run node1 node2 node3
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBadd\fR
.RS 4
.sp
This command simplifies the process of adding a new node to a running cluster\&. The new node will be installed and configured with the packages and configuration files needed to run the cluster resources\&. If a cluster file system is used, the new node will be set up to host the file system\&.
.sp
This command should be executed from a node already in the cluster\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
add <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBremove\fR
.RS 4
.sp
This command simplifies the process of removing a node from the cluster, moving any resources hosted by that node to other nodes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
remove <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstatus\fR
.RS 4
.sp
Reports the status for the cluster messaging layer on the local node\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBhealth\fR
.RS 4
.sp
Runs a larger set of tests and queries on all nodes in the cluster to verify the general system health and detect potential problems\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
health
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwait_for_startup\fR
.RS 4
.sp
Mostly useful in scripts or automated workflows, this command will attempt to connect to the local cluster node repeatedly\&. The command will keep trying until the cluster node responds, or the timeout elapses\&. The timeout can be changed by supplying a value in seconds as an argument\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
wait_for_startup
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrun\fR
.RS 4
.sp
This command takes a shell statement as argument, executes that statement on all nodes in the cluster, and reports the result\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
run <command>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
run "cat /proc/uptime"
.fi
.if n \{\
.RE
.\}
.RE
.SS "cluster"
.sp
Cluster scripts can perform cluster\-wide configuration, validation and management\&. See the list command for an overview of available scripts\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlist\fR
.RS 4
.sp
Lists the available cluster scripts\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
list
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBverify\fR
.RS 4
.sp
Mainly useful when creating new scripts, this command verifies that the script definition has all necessary fields and that the referenced actions exist\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
verify <script>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdescribe\fR
.RS 4
.sp
Prints a description and short summary of the cluster script, with descriptions of all parameters, both required and optional\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
describe <script>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsteps\fR
.RS 4
.sp
List the names of all steps in the cluster script\&.
.sp
This command is intended for use by automated tools and the web frontend\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
steps <script>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrun\fR
.RS 4
.sp
Runs a cluster script\&. Can optionally take at least two arguments: * nodes=<nodes>: List of nodes that the script runs over * dry_run=yes|no: If set, the script will not perform any modifications\&.
.sp
Additional arguments may be available depending on the cluster script\&. Use the describe command to see what arguments are provided\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
run <script> [args\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
run health dry_run=yes verbose=yes
run init nodes="node\-1 node\-2 node\-3"
.fi
.if n \{\
.RE
.\}
.RE
.SS "corosync"
.sp
Corosync is the underlying messaging layer for most HA clusters\&. This level provides commands for editing and managing the corosync configuration\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstatus\fR
.RS 4
.sp
Displays the status of Corosync, including the votequorum state\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Displays the corosync configuration on the current node\&.
.sp
.if n \{\
.RS 4
.\}
.nf
show
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBedit\fR
.RS 4
.sp
Opens the Corosync configuration file in an editor\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
edit
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlog\fR
.RS 4
.sp
Opens the log file specified in the corosync configuration file\&. If no log file is configured, this command returns an error\&.
.sp
The pager used can be configured either using the PAGER environment variable or in crm\&.conf\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
log
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBreload\fR
.RS 4
.sp
Tells all instances of corosync in this cluster to reload corosync\&.conf\&.
.sp
After pushing a new configuration to all cluster nodes, call this command to make corosync use the new configuration\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
reload
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBpush\fR
.RS 4
.sp
Pushes the corosync configuration file on this node to the list of nodes provided\&. If no target nodes are given, the configuration is pushed to all other nodes in the cluster\&.
.sp
It is recommended to use csync2 to distribute the cluster configuration files rather than relying on this command\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
push [node] \&.\&.\&.
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
push node\-2 node\-3
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBpull\fR
.RS 4
.sp
Gets the corosync configuration from another node and copies it to this node\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
pull <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdiff\fR
.RS 4
.sp
Diffs the corosync configurations on different nodes\&. If no nodes are given as arguments, the corosync configurations on all nodes in the cluster are compared\&.
.sp
diff takes an option argument \-\-checksum, to force checksum mode\&.
.sp
If the number of nodes to compare are greater than two, diff automatically switches to checksum mode\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
diff [\-\-checksum] [node\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBadd-node\fR
.RS 4
.sp
Adds a node to the corosync configuration\&. This is used with the udpu type configuration in corosync\&.
.sp
A nodeid for the added node is generated automatically\&.
.sp
Note that this command assumes that only a single ring is used, and sets only the address for ring0\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
add\-node <addr>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdel-node\fR
.RS 4
.sp
Removes a node from the corosync configuration\&. The argument given is the ring0_addr address set in the configuration file\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
del\-node <addr>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBget\fR
.RS 4
.sp
Returns the value configured in corosync\&.conf, which is not necessarily the value used in the running configuration\&. See reload for telling corosync about configuration changes\&.
.sp
The argument is the complete dot\-separated path to the value\&.
.sp
If there are multiple values configured with the same path, the command returns all values for that path\&. For example, to get all configured ring0_addr values, use this command:
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
get nodelist\&.node\&.ring0_addr
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBset\fR
.RS 4
.sp
Sets the value identified by the given path\&. If the value does not exist in the configuration file, it will be added\&. However, if the section containing the value does not exist, the command will fail\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
set quorum\&.expected_votes 2
.fi
.if n \{\
.RE
.\}
.RE
.SS "cib (shadow CIBs)"
.sp
This level is for management of shadow CIBs\&. It is available both at the top level and the configure level\&.
.sp
All the commands are implemented using cib_shadow(8) and the CIB_shadow environment variable\&. The user prompt always includes the name of the currently active shadow or the live CIB\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnew\fR
.RS 4
.sp
Create a new shadow CIB\&. The live cluster configuration and status is copied to the shadow CIB\&.
.sp
If the name of the shadow is omitted, we create a temporary CIB shadow\&. It is useful if multiple level sessions are desired without affecting the cluster\&. A temporary CIB shadow is short lived and will be removed either on commit or on program exit\&. Note that if the temporary shadow is not committed all changes in the temporary shadow are lost\&.
.sp
Specify withstatus if you want to edit the status section of the shadow CIB (see the cibstatus section)\&. Add force to force overwriting the existing shadow CIB\&.
.sp
To start with an empty configuration that is not copied from the live CIB, specify the empty keyword\&. (This also allows a shadow CIB to be created in case no cluster is running\&.)
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
new [<cib>] [withstatus] [force] [empty]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdelete\fR
.RS 4
.sp
Delete an existing shadow CIB\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
delete <cib>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBreset\fR
.RS 4
.sp
Copy the current cluster configuration into the shadow CIB\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
reset <cib>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcommit\fR
.RS 4
.sp
Apply a shadow CIB to the cluster\&. If the shadow name is omitted then the current shadow CIB is applied\&.
.sp
Temporary shadow CIBs are removed automatically on commit\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
commit [<cib>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBuse\fR
.RS 4
.sp
Choose a CIB source\&. If you want to edit the status from the shadow CIB specify withstatus (see cibstatus)\&. Leave out the CIB name to switch to the running CIB\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
use [<cib>] [withstatus]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdiff\fR
.RS 4
.sp
Print differences between the current cluster configuration and the active shadow CIB\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
diff
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlist\fR
.RS 4
.sp
List existing shadow CIBs\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
list
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBimport\fR
.RS 4
.sp
At times it may be useful to create a shadow file from the existing CIB\&. The CIB may be specified as file or as a PE input file number\&. The shell will look up files in the local directory first and then in the PE directory (typically /var/lib/pengine)\&. Once the CIB file is found, it is copied to a shadow and this shadow is immediately available for use at both configure and cibstatus levels\&.
.sp
If the shadow name is omitted then the target shadow is named after the input CIB file\&.
.sp
Note that there are often more than one PE input file, so you may need to specify the full name\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
import {<file>|<number>} [<shadow>]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
import pe\-warn\-2222
import 2289 issue2
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcibstatus\fR
.RS 4
.sp
Enter edit and manage the CIB status section level\&. See the CIB status management section\&.
.RE
.SS "ra"
.sp
This level contains commands which show various information about the installed resource agents\&. It is available both at the top level and at the configure level\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBclasses\fR
.RS 4
.sp
Print all resource agents\*(Aq classes and, where appropriate, a list of available providers\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
classes
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlist\fR
.RS 4
.sp
List available resource agents for the given class\&. If the class is ocf, supply a provider to get agents which are available only from that provider\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
list <class> [<provider>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
list ocf pacemaker
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinfo (meta)\fR
.RS 4
.sp
Show the meta\-data of a resource agent type\&. This is where users can find information on how to use a resource agent\&. It is also possible to get information from some programs: pengine, crmd, cib, and stonithd\&. Just specify the program name instead of an RA\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
info [<class>:[<provider>:]]<type>
info <type> <class> [<provider>] (obsolete)
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
info apache
info ocf:pacemaker:Dummy
info stonith:ipmilan
info pengine
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBproviders\fR
.RS 4
.sp
List providers for a resource agent type\&. The class parameter defaults to ocf\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
providers <type> [<class>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
providers apache
.fi
.if n \{\
.RE
.\}
.RE
.SS "resource"
.sp
At this level resources may be managed\&.
.sp
All (or almost all) commands are implemented with the CRM tools such as crm_resource(8)\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstatus (show, list)\fR
.RS 4
.sp
Print resource status\&. If the resource parameter is left out status of all resources is printed\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status [<rsc>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstart\fR
.RS 4
.sp
Start a resource by setting the target\-role attribute\&. If there are multiple meta attributes sets, the attribute is set in all of them\&. If the resource is a clone, all target\-role attributes are removed from the children resources\&.
.sp
For details on group management see options manage\-children\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
start <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstop\fR
.RS 4
.sp
Stop a resource using the target\-role attribute\&. If there are multiple meta attributes sets, the attribute is set in all of them\&. If the resource is a clone, all target\-role attributes are removed from the children resources\&.
.sp
For details on group management see options manage\-children\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
stop <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrestart\fR
.RS 4
.sp
Restart a resource\&. This is essentially a shortcut for resource stop followed by a start\&. The shell is first going to wait for the stop to finish, that is for all resources to really stop, and only then to order the start action\&. Due to this command entailing a whole set of operations, informational messages are printed to let the user see some progress\&.
.sp
For details on group management see options manage\-children\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
restart <rsc>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
# crm resource restart g_webserver
INFO: ordering g_webserver to stop
waiting for stop to finish \&.\&.\&.\&. done
INFO: ordering g_webserver to start
#
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBpromote\fR
.RS 4
.sp
Promote a master\-slave resource using the target\-role attribute\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
promote <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdemote\fR
.RS 4
.sp
Demote a master\-slave resource using the target\-role attribute\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
demote <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmanage\fR
.RS 4
.sp
Manage a resource using the is\-managed attribute\&. If there are multiple meta attributes sets, the attribute is set in all of them\&. If the resource is a clone, all is\-managed attributes are removed from the children resources\&.
.sp
For details on group management see options manage\-children\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
manage <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBunmanage\fR
.RS 4
.sp
Unmanage a resource using the is\-managed attribute\&. If there are multiple meta attributes sets, the attribute is set in all of them\&. If the resource is a clone, all is\-managed attributes are removed from the children resources\&.
.sp
For details on group management see options manage\-children\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
unmanage <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmigrate (move)\fR
.RS 4
.sp
Migrate a resource to a different node\&. If node is left out, the resource is migrated by creating a constraint which prevents it from running on the current node\&. Additionally, you may specify a lifetime for the constraint\-\-\-once it expires, the location constraint will no longer be active\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
migrate <rsc> [<node>] [<lifetime>] [force]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBunmigrate (unmove)\fR
.RS 4
.sp
Remove the constraint generated by the previous migrate command\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
unmigrate <rsc>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmaintenance\fR
.RS 4
.sp
Enables or disables the per\-resource maintenance mode\&. When this mode is enabled, no monitor operations will be triggered for the resource\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
maintenance <resource> [on|off|true|false]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
maintenance rsc1
maintenance rsc2 off
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBparam\fR
.RS 4
.sp
Show/edit/delete a parameter of a resource\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
param <rsc> set <param> <value>
param <rsc> delete <param>
param <rsc> show <param>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
param ip_0 show ip
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsecret\fR
.RS 4
.sp
Sensitive parameters can be kept in local files rather than CIB in order to prevent accidental data exposure\&. Use the secret command to manage such parameters\&. stash and unstash move the value from the CIB and back to the CIB respectively\&. The set subcommand sets the parameter to the provided value\&. delete removes the parameter completely\&. show displays the value of the parameter from the local file\&. Use check to verify if the local file content is valid\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
secret <rsc> set <param> <value>
secret <rsc> stash <param>
secret <rsc> unstash <param>
secret <rsc> delete <param>
secret <rsc> show <param>
secret <rsc> check <param>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
secret fence_1 show password
secret fence_1 stash password
secret fence_1 set password secret_value
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmeta\fR
.RS 4
.sp
Show/edit/delete a meta attribute of a resource\&. Currently, all meta attributes of a resource may be managed with other commands such as resource stop\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
meta <rsc> set <attr> <value>
meta <rsc> delete <attr>
meta <rsc> show <attr>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
meta ip_0 set target\-role stopped
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fButilization\fR
.RS 4
.sp
Show/edit/delete a utilization attribute of a resource\&. These attributes describe hardware requirements\&. By setting the placement\-strategy cluster property appropriately, it is possible then to distribute resources based on resource requirements and node size\&. See also node utilization attributes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
utilization <rsc> set <attr> <value>
utilization <rsc> delete <attr>
utilization <rsc> show <attr>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
utilization xen1 set memory 4096
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfailcount\fR
.RS 4
.sp
Show/edit/delete the failcount of a resource\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
failcount <rsc> set <node> <value>
failcount <rsc> delete <node>
failcount <rsc> show <node>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
failcount fs_0 delete node2
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcleanup\fR
.RS 4
.sp
Cleanup resource status\&. Typically done after the resource has temporarily failed\&. If a node is omitted, cleanup on all nodes\&. If there are many nodes, the command may take a while\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
cleanup <rsc> [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrefresh\fR
.RS 4
.sp
Refresh CIB from the LRM status\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
refresh [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBreprobe\fR
.RS 4
.sp
Probe for resources not started by the CRM\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
reprobe [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBtrace\fR
.RS 4
.sp
Start tracing RA for the given operation\&. The trace files are stored in $HA_VARLIB/trace_ra\&. If the operation to be traced is monitor, note that the number of trace files can grow very quickly\&.
.sp
If no operation name is given, crmsh will attempt to trace all operations for the RA\&. This includes any configured operations, start and stop as well as promote/demote for multistate resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
trace <rsc> [<op> [<interval>] ]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
trace fs start
trace webserver
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBuntrace\fR
.RS 4
.sp
Stop tracing RA for the given operation\&. If no operation name is given, crmsh will attempt to stop tracing all operations in resource\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
untrace <rsc> [<op> [<interval>] ]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
untrace fs start
untrace webserver
.fi
.if n \{\
.RE
.\}
.RE
.SS "scores"
.sp
Display the allocation scores for all resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
scores
.fi
.if n \{\
.RE
.\}
.SS "node"
.sp
Node management and status commands\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstatus\fR
.RS 4
.sp
Show nodes\*(Aq status as XML\&. If the node parameter is omitted then all nodes are shown\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Show a node definition\&. If the node parameter is omitted then all nodes are shown\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstandby\fR
.RS 4
.sp
Set a node to standby status\&. The node parameter defaults to the node where the command is run\&. Additionally, you may specify a lifetime for the standby\-\-\-if set to reboot, the node will be back online once it reboots\&. forever will keep the node in standby after reboot\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
standby [<node>] [<lifetime>]

lifetime :: reboot | forever
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBonline\fR
.RS 4
.sp
Set a node to online status\&. The node parameter defaults to the node where the command is run\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
online [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmaintenance\fR
.RS 4
.sp
Set the node status to maintenance\&. This is equivalent to the cluster\-wide maintenance\-mode property but puts just one node into the maintenance mode\&. The node parameter defaults to the node where the command is run\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
maintenance [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBready\fR
.RS 4
.sp
Set the node\(cqs maintenance status to off\&. The node should be now again fully operational and capable of running resource operations\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
ready [<node>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfence\fR
.RS 4
.sp
Make CRM fence a node\&. This functionality depends on stonith resources capable of fencing the specified node\&. No such stonith resources, no fencing will happen\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
fence <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBclearnodestate\fR
.RS 4
.sp
Resets and clears the state of the specified node\&. This node is afterwards assumed clean and offline\&. This command can be used to manually confirm that a node has been fenced (e\&.g\&., powered off)\&.
.sp
Be careful! This can cause data corruption if you confirm that a node is down that is, in fact, not cleanly down \- the cluster will proceed as if the fence had succeeded, possibly starting resources multiple times\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
clearstate <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdelete\fR
.RS 4
.sp
Delete a node\&. This command will remove the node from the CIB and, in case the cluster stack is running, use the appropriate program (crm_node or hb_delnode) to remove the node from the membership\&.
.sp
If the node is still listed as active and a member of our partition we refuse to remove it\&. With the global force option (\-F) we will try to delete the node anyway\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
delete <node>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBattribute\fR
.RS 4
.sp
Edit node attributes\&. This kind of attribute should refer to relatively static properties, such as memory size\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
attribute <node> set <attr> <value>
attribute <node> delete <attr>
attribute <node> show <attr>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
attribute node_1 set memory_size 4096
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fButilization\fR
.RS 4
.sp
Edit node utilization attributes\&. These attributes describe hardware characteristics as integer numbers such as memory size or the number of CPUs\&. By setting the placement\-strategy cluster property appropriately, it is possible then to distribute resources based on resource requirements and node size\&. See also resource utilization attributes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
utilization <node> set <attr> <value>
utilization <node> delete <attr>
utilization <node> show <attr>
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
utilization node_1 set memory 16384
utilization node_1 show cpu
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBstatus-attr\fR
.RS 4
.sp
Edit node attributes which are in the CIB status section, i\&.e\&. attributes which hold properties of a more volatile nature\&. One typical example is attribute generated by the pingd utility\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
status\-attr <node> set <attr> <value>
status\-attr <node> delete <attr>
status\-attr <node> show <attr>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
status\-attr node_1 show pingd
.fi
.if n \{\
.RE
.\}
.RE
.SS "site"
.sp
A cluster may consist of two or more subclusters in different and distant locations\&. This set of commands supports such setups\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBticket\fR
.RS 4
.sp
Tickets are cluster\-wide attributes\&. They can be managed at the site where this command is executed\&.
.sp
It is then possible to constrain resources depending on the ticket availability (see the rsc_ticket command for more details)\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
ticket {grant|revoke|standby|activate|show|time|delete} <ticket>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ticket grant ticket1
.fi
.if n \{\
.RE
.\}
.RE
.SS "options"
.sp
The user may set various options for the crm shell itself\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBskill-level\fR
.RS 4
.sp
Based on the skill\-level setting, the user is allowed to use only a subset of commands\&. There are three levels: operator, administrator, and expert\&. The operator level allows only commands at the resource and node levels, but not editing or deleting resources\&. The administrator may do that and may also configure the cluster at the configure level and manage the shadow CIBs\&. The expert may do all\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
skill\-level <level>

level :: operator | administrator | expert
.fi
.if n \{\
.RE
.\}
\fBNote on security\fR
.sp
The skill\-level option is advisory only\&. There is nothing stopping any users change their skill level (see Access Control Lists (ACL) on how to enforce access control)\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBuser\fR
.RS 4
.sp
Sufficient privileges are necessary in order to manage a cluster: programs such as crm_verify or crm_resource and, ultimately, cibadmin have to be run either as root or as the CRM owner user (typically hacluster)\&. You don\(cqt have to worry about that if you run crm as root\&. A more secure way is to run the program with your usual privileges, set this option to the appropriate user (such as hacluster), and setup the sudoers file\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
user system\-user
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
user hacluster
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBeditor\fR
.RS 4
.sp
The edit command invokes an editor\&. Use this to specify your preferred editor program\&. If not set, it will default to either the value of the EDITOR environment variable or to one of the standard UNIX editors (vi,emacs,nano)\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
editor program
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
editor vim
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBpager\fR
.RS 4
.sp
The view command displays text through a pager\&. Use this to specify your preferred pager program\&. If not set, it will default to either the value of the PAGER environment variable or to one of the standard UNIX system pagers (less,more,pg)\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsort-elements\fR
.RS 4
.sp
crm by default sorts CIB elements\&. If you want them appear in the order they were created, set this option to no\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
sort\-elements {yes|no}
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
sort\-elements no
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwait\fR
.RS 4
.sp
In normal operation, crm runs a command and gets back immediately to process other commands or get input from the user\&. With this option set to yes it will wait for the started transition to finish\&. In interactive mode dots are printed to indicate progress\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
wait {yes|no}
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
wait yes
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBoutput\fR
.RS 4
.sp
crm can adorn configurations in two ways: in color (similar to for instance the ls \-\-color command) and by showing keywords in upper case\&. Possible values are plain, color, and \fIuppercase\fR\&. It is possible to combine the latter two in order to get an upper case xmass tree\&. Just set this option to color,uppercase\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcolorscheme\fR
.RS 4
.sp
With output set to color, a comma separated list of colors from this option are used to emphasize:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
keywords
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
object ids
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
attribute names
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
attribute values
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
scores
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
resource references
.RE
.sp
crm can show colors only if there is curses support for python installed (usually provided by the python\-curses package)\&. The colors are whatever is available in your terminal\&. Use normal if you want to keep the default foreground color\&.
.sp
This user preference defaults to yellow,normal,cyan,red,green,magenta which is good for terminals with dark background\&. You may want to change the color scheme and save it in the preferences file for other color setups\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
colorscheme yellow,normal,blue,red,green,magenta
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcheck-frequency\fR
.RS 4
.sp
Semantic check of the CIB or elements modified or created may be done on every configuration change (always), when verifying (on\-verify) or never\&. It is by default set to always\&. Experts may want to change the setting to on\-verify\&.
.sp
The checks require that resource agents are present\&. If they are not installed at the configuration time set this preference to never\&.
.sp
See Configuration semantic checks for more details\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcheck-mode\fR
.RS 4
.sp
Semantic check of the CIB or elements modified or created may be done in the strict mode or in the relaxed mode\&. In the former certain problems are treated as configuration errors\&. In the relaxed mode all are treated as warnings\&. The default is strict\&.
.sp
See Configuration semantic checks for more details\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBadd-quotes\fR
.RS 4
.sp
The shell (as in /bin/sh) parser strips quotes from the command line\&. This may sometimes make it really difficult to type values which contain white space\&. One typical example is the configure filter command\&. The crm shell will supply extra quotes around arguments which contain white space\&. The default is yes\&.
\fBNote on quotes use\fR
.sp
Adding quotes around arguments automatically has been introduced with version 1\&.2\&.2 and it is technically a regression\&. Being a regression is the only reason the add\-quotes option exists\&. If you have custom shell scripts which would break, just set the add\-quotes option to no\&.
.sp
For instance, with adding quotes enabled, it is possible to do the following:
.sp
.if n \{\
.RS 4
.\}
.nf
# crm configure primitive d1 Dummy \e
    meta description="some description here"
# crm configure filter \*(Aqsed "s/hostlist=\&./&node\-c /"\*(Aq fencing
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmanage-children\fR
.RS 4
.sp
Some resource management commands, such as resource stop, when the target resource is a group, may not always produce desired result\&. Each element, group and the primitive members, can have a meta attribute and those attributes may end up with conflicting values\&. Consider the following construct:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)# configure show svc fs virtual\-ip
primitive fs Filesystem \e
    params device="/dev/drbd0" directory="/srv/nfs" fstype=ext3 \e
    op monitor interval=10s \e
    meta target\-role=Started
primitive virtual\-ip IPaddr2 \e
    params ip=10\&.2\&.13\&.110 iflabel=1 \e
    op monitor interval=10s \e
    op start interval=0 \e
    meta target\-role=Started
group svc fs virtual\-ip \e
    meta target\-role=Stopped
.fi
.if n \{\
.RE
.\}
.sp
Even though the element svc should be stopped, the group is actually running because all its members have the target\-role set to Started:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)# resource show svc
resource svc is running on: xen\-f
.fi
.if n \{\
.RE
.\}
.sp
Hence, if the user invokes resource stop svc the intention is not clear\&. This preference gives the user an opportunity to better control what happens if attributes of group members have values which are in conflict with the same attribute of the group itself\&.
.sp
Possible values are ask (the default), always, and never\&. If set to always, the crm shell removes all children attributes which have values different from the parent\&. If set to never, all children attributes are left intact\&. Finally, if set to ask, the user will be asked for each member what is to be done\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Display all current settings\&.
.sp
Given an option name as argument, show will display only the value of that argument\&.
.sp
Given all as argument, show displays all available user options\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show [all|<option>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
show
show skill\-level
show all
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBset\fR
.RS 4
.sp
Sets the value of an option\&. Takes the fully qualified name of the option as argument, as displayed by show all\&.
.sp
The modified option value is stored in the user\-local configuration file, usually found in ~/\&.config/crm/crm\&.conf\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
set <option> <value>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
set color\&.warn "magenta bold"
set editor nano
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsave\fR
.RS 4
.sp
Save current settings to the rc file ($HOME/\&.config/crm/rc)\&. On further crm runs, the rc file is automatically read and parsed\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBreset\fR
.RS 4
.sp
This command resets all user options to the defaults\&. If used as a single\-shot command, the rc file ($HOME/\&.config/crm/rc) is reset to the defaults too\&.
.RE
.SS "configure"
.sp
This level enables all CIB object definition commands\&.
.sp
The configuration may be logically divided into four parts: nodes, resources, constraints, and (cluster) properties and attributes\&. Each of these commands support one or more basic CIB objects\&.
.sp
Nodes and attributes describing nodes are managed using the node command\&.
.sp
Commands for resources are:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
primitive
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
monitor
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
group
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
clone
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ms/master
(master\-slave)
.RE
.sp
In order to streamline large configurations, it is possible to define a template which can later be referenced in primitives:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsc_template
.RE
.sp
In that case the primitive inherits all attributes defined in the template\&.
.sp
There are three types of constraints:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
location
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
colocation
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
order
.RE
.sp
It is possible to define fencing order (stonith resource priorities):
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
fencing_topology
.RE
.sp
Finally, there are the cluster properties, resource meta attributes defaults, and operations defaults\&. All are just a set of attributes\&. These attributes are managed by the following commands:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
property
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
rsc_defaults
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
op_defaults
.RE
.sp
In addition to the cluster configuration, the Access Control Lists (ACL) can be setup to allow access to parts of the CIB for users other than root and hacluster\&. The following commands manage ACL:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
user
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
role
.RE
.sp
In Pacemaker 1\&.1\&.12 and up, these commands replace the user command for handling ACLs:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
acl_target
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
acl_group
.RE
.sp
The changes are applied to the current CIB only on ending the configuration session or using the commit command\&.
.sp
Comments start with # in the first line\&. The comments are tied to the element which follows\&. If the element moves, its comments will follow\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnode\fR
.RS 4
.sp
The node command describes a cluster node\&. Nodes in the CIB are commonly created automatically by the CRM\&. Hence, you should not need to deal with nodes unless you also want to define node attributes\&. Note that it is also possible to manage node attributes at the node level\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
node [$id=<id>] <uname>[:<type>]
  [description=<description>]
  [attributes [$id=<id>] [<score>:] [rule\&.\&.\&.]
    <param>=<value> [<param>=<value>\&.\&.\&.]] | $id\-ref=<ref>
  [utilization [$id=<id>] [<score>:] [rule\&.\&.\&.]
    <param>=<value> [<param>=<value>\&.\&.\&.]] | $id\-ref=<ref>

type :: normal | member | ping | remote
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
node node1
node big_node attributes memory=64
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBprimitive\fR
.RS 4
.sp
The primitive command describes a resource\&. It may be referenced only once in group, clone, or master\-slave objects\&. If it\(cqs not referenced, then it is placed as a single resource in the CIB\&.
.sp
Operations may be specified anonymously, as a group or by reference:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
"Anonymous", as a list of
op
specifications\&. Use this method if you don\(cqt need to reference the set of operations elsewhere\&. This is the most common way to define operations\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
If reusing operation sets is desired, use the
operations
keyword along with an id to give the operations set a name\&. Use the
operations
keyword and an id\-ref value set to the id of another operations set, to apply the same set of operations to this primitive\&.
.RE
.sp
Operation attributes which are not recognized are saved as instance attributes of that operation\&. A typical example is OCF_CHECK_LEVEL\&.
.sp
For multistate resources, roles are specified as role=<role>\&.
.sp
A template may be defined for resources which are of the same type and which share most of the configuration\&. See rsc_template for more information\&.
.sp
Attributes containing time values, such as the interval attribute on operations, are configured either as a plain number, which is interpreted as a time in seconds, or using one of the following suffixes:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
s,
sec
\- time in seconds (same as no suffix)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
ms,
msec
\- time in milliseconds
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
us,
usec
\- time in microseconds
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
m,
min
\- time in minutes
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
h,
hr
\- time in hours
.RE
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive <rsc> {[<class>:[<provider>:]]<type>|@<template>}
  [description=<description>]
  [params attr_list]
  [meta attr_list]
  [utilization attr_list]
  [operations id_spec]
    [op op_type [<attribute>=<value>\&.\&.\&.] \&.\&.\&.]

attr_list :: [$id=<id>] [<score>:] [rule\&.\&.\&.]
             <attr>=<val> [<attr>=<val>\&.\&.\&.]] | $id\-ref=<id>
id_spec :: $id=<id> | $id\-ref=<id>
op_type :: start | stop | monitor
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
primitive apcfence stonith:apcsmart \e
  params ttydev=/dev/ttyS0 hostlist="node1 node2" \e
  op start timeout=60s \e
  op monitor interval=30m timeout=60s

primitive www8 apache \e
  params configfile=/etc/apache/www8\&.conf \e
  operations $id\-ref=apache_ops

primitive db0 mysql \e
  params config=/etc/mysql/db0\&.conf \e
  op monitor interval=60s \e
  op monitor interval=300s OCF_CHECK_LEVEL=10

primitive r0 ocf:linbit:drbd \e
  params drbd_resource=r0 \e
  op monitor role=Master interval=60s \e
  op monitor role=Slave interval=300s

primitive xen0 @vm_scheme1 \e
  params xmfile=/etc/xen/vm/xen0

primitive mySpecialRsc Special \e
  params 3: rule #uname eq node1 interface=eth1 \e
  params 2: rule #uname eq node2 interface=eth2 port=8888 \e
  params 1: interface=eth0 port=9999
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmonitor\fR
.RS 4
.sp
Monitor is by far the most common operation\&. It is possible to add it without editing the whole resource\&. Also, long primitive definitions may be a bit uncluttered\&. In order to make this command as concise as possible, less common operation attributes are not available\&. If you need them, then use the op part of the primitive command\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
monitor <rsc>[:<role>] <interval>[:<timeout>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
monitor apcfence 60m:60s
.fi
.if n \{\
.RE
.\}
.sp
Note that after executing the command, the monitor operation may be shown as part of the primitive definition\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBgroup\fR
.RS 4
.sp
The group command creates a group of resources\&. This can be useful when resources depend on other resources and require that those resources start in order on the same node\&. A commmon use of resource groups is to ensure that a server and a virtual IP are located together, and that the virtual IP is started before the server\&.
.sp
Grouped resources are started in the order they appear in the group, and stopped in the reverse order\&. If a resource in the group cannot run anywhere, resources following it in the group will not start\&.
.sp
group can be passed the "container" meta attribute, to indicate that it is to be used to group VM resources monitored using Nagios\&. The resource referred to by the container attribute must be of type ocf:heartbeat:Xen, oxf:heartbeat:VirtualDomain or ocf:heartbeat:lxc\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
group <name> <rsc> [<rsc>\&.\&.\&.]
  [description=<description>]
  [meta attr_list]
  [params attr_list]

attr_list :: [$id=<id>] <attr>=<val> [<attr>=<val>\&.\&.\&.] | $id\-ref=<id>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
group internal_www disk0 fs0 internal_ip apache \e
  meta target_role=stopped

group vm\-and\-services vm vm\-sshd meta container="vm"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBclone\fR
.RS 4
.sp
The clone command creates a resource clone\&. It may contain a single primitive resource or one group of resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
clone <name> <rsc>
  [description=<description>]
  [meta attr_list]
  [params attr_list]

attr_list :: [$id=<id>] <attr>=<val> [<attr>=<val>\&.\&.\&.] | $id\-ref=<id>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
clone cl_fence apc_1 \e
  meta clone\-node\-max=1 globally\-unique=false
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBms (master)\fR
.RS 4
.sp
The ms command creates a master/slave resource type\&. It may contain a single primitive resource or one group of resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
ms <name> <rsc>
  [description=<description>]
  [meta attr_list]
  [params attr_list]

attr_list :: [$id=<id>] <attr>=<val> [<attr>=<val>\&.\&.\&.] | $id\-ref=<id>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ms disk1 drbd1 \e
  meta notify=true globally\-unique=false
.fi
.if n \{\
.RE
.\}
\fBNote on id\-ref usage\fR
.sp
Instance or meta attributes (\(oqparams` and meta) may contain a reference to another set of attributes\&. In that case, no other attributes are allowed\&. Since attribute sets\(cq ids, though they do exist, are not shown in the crm, it is also possible to reference an object instead of an attribute set\&. crm will automatically replace such a reference with the right id:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# primitive a2 www\-2 meta $id\-ref=a1
crm(live)configure# show a2
primitive a2 apache \e
    meta $id\-ref=a1\-meta_attributes
    [\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
It is advisable to give meaningful names to attribute sets which are going to be referenced\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrsc_template\fR
.RS 4
.sp
The rsc_template command creates a resource template\&. It may be referenced in primitives\&. It is used to reduce large configurations with many similar resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_template <name> [<class>:[<provider>:]]<type>
  [description=<description>]
  [params attr_list]
  [meta attr_list]
  [utilization attr_list]
  [operations id_spec]
    [op op_type [<attribute>=<value>\&.\&.\&.] \&.\&.\&.]

attr_list :: [$id=<id>] <attr>=<val> [<attr>=<val>\&.\&.\&.] | $id\-ref=<id>
id_spec :: $id=<id> | $id\-ref=<id>
op_type :: start | stop | monitor
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_template public_vm Xen \e
  op start timeout=300s \e
  op stop timeout=300s \e
  op monitor interval=30s timeout=60s \e
  op migrate_from timeout=600s \e
  op migrate_to timeout=600s
primitive xen0 @public_vm \e
  params xmfile=/etc/xen/xen0
primitive xen1 @public_vm \e
  params xmfile=/etc/xen/xen1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlocation\fR
.RS 4
.sp
location defines the preference of nodes for the given resource\&. The location constraints consist of one or more rules which specify a score to be awarded if the rule matches\&.
.sp
The resource referenced by the location constraint can be one of the following:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Plain resource reference:
location loc1 webserver 100: node1
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Resource set in curly brackets:
location loc1 { virtual\-ip webserver } 100: node1
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tag containing resource ids:
location loc1 tag1 100: node1
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Resource pattern:
location loc1 /web\&.*/ 100: node1
.RE
.sp
The syntax for resource sets is described in detail for colocation\&.
.sp
For more details on how to configure resource sets, see Syntax: Resource sets\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
location <id> rsc [role=<role>] {node_pref|rules}

rsc :: /<rsc\-pattern>/
        | { resource_sets }
        | <rsc>

node_pref :: <score>: <node>

rules ::
  rule [id_spec] [$role=<role>] <score>: <expression>
  [rule [id_spec] [$role=<role>] <score>: <expression> \&.\&.\&.]

id_spec :: $id=<id> | $id\-ref=<id>
score :: <number> | <attribute> | [\-]inf
expression :: <simple_exp> [bool_op <simple_exp> \&.\&.\&.]
bool_op :: or | and
simple_exp :: <attribute> [type:]<binary_op> <value>
          | <unary_op> <attribute>
          | date <date_expr>
type :: string | version | number
binary_op :: lt | gt | lte | gte | eq | ne
unary_op :: defined | not_defined

date_expr :: lt <end>
         | gt <start>
         | in start=<start> end=<end>
         | in start=<start> <duration>
         | spec <date_spec>
duration|date_spec ::
         hours=<value>
         | monthdays=<value>
         | weekdays=<value>
         | yearsdays=<value>
         | months=<value>
         | weeks=<value>
         | years=<value>
         | weekyears=<value>
         | moon=<value>
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
location conn_1 internal_www 100: node1

location conn_1 internal_www \e
  rule 50: #uname eq node1 \e
  rule pingd: defined pingd

location conn_2 dummy_float \e
  rule \-inf: not_defined pingd or pingd number:lte 0
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcolocation (collocation)\fR
.RS 4
.sp
This constraint expresses the placement relation between two or more resources\&. If there are more than two resources, then the constraint is called a resource set\&.
.sp
The score is used to indicate the priority of the constraint\&. A positive score indicates that the resources should run on the same node\&. A negative score that they should not run on the same node\&. Values of positive or negative infinity indicate a mandatory constraint\&.
.sp
In the two resource form, the cluster will place <with\-rsc> first, and then decide where to put the <rsc> resource\&.
.sp
Collocation resource sets have an extra attribute (sequential) to allow for sets of resources which don\(cqt depend on each other in terms of state\&. The shell syntax for such sets is to put resources in parentheses\&.
.sp
Sets cannot be nested\&.
.sp
The optional node\-attribute references an attribute in nodes\*(Aq instance attributes\&.
.sp
For more details on how to configure resource sets, see Syntax: Resource sets\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
colocation <id> <score>: <rsc>[:<role>] <with\-rsc>[:<role>]
  [node\-attribute=<node_attr>]

colocation <id> <score>: resource_sets
  [node\-attribute=<node_attr>]

resource_sets :: resource_set [resource_set \&.\&.\&.]

resource_set :: ["("|"["] <rsc>[:<role>] [<rsc>[:<role>] \&.\&.\&.] \e
                [attributes]  [")"|"]"]

attributes :: [require\-all=(true|false)] [sequential=(true|false)]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
colocation never_put_apache_with_dummy \-inf: apache dummy
colocation c1 inf: A ( B C )
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBorder\fR
.RS 4
.sp
This constraint expresses the order of actions on two resources or more resources\&. If there are more than two resources, then the constraint is called a resource set\&.
.sp
Ordered resource sets have an extra attribute to allow for sets of resources whose actions may run in parallel\&. The shell syntax for such sets is to put resources in parentheses\&.
.sp
If the subsequent resource can start or promote after any one of the resources in a set has done, enclose the set in brackets ([ and ])\&.
.sp
Sets cannot be nested\&.
.sp
Three strings are reserved to specify a kind of order constraint: Mandatory, Optional, and Serialize\&. It is preferred to use one of these settings instead of score\&. Previous versions mapped scores 0 and inf to keywords advisory and mandatory\&. That is still valid but deprecated\&.
.sp
For more details on how to configure resource sets, see Syntax: Resource sets\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
order <id> {kind|<score>}: first then [symmetrical=<bool>]

order <id> {kind|<score>}: resource_sets [symmetrical=<bool>]

kind :: Mandatory | Optional | Serialize

first :: <rsc>[:<action>]

then ::  <rsc>[:<action>]

resource_sets :: resource_set [resource_set \&.\&.\&.]

resource_set :: ["["|"("] <rsc>[:<action>] [<rsc>[:<action>] \&.\&.\&.] \e
                [attributes] ["]"|")"]

attributes :: [require\-all=(true|false)] [sequential=(true|false)]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
order c_apache_1 Mandatory: apache:start ip_1
order o1 Serialize: A ( B C )
order order_2 Mandatory: [ A B ] C
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrsc_ticket\fR
.RS 4
.sp
This constraint expresses dependency of resources on cluster\-wide attributes, also known as tickets\&. Tickets are mainly used in geo\-clusters, which consist of multiple sites\&. A ticket may be granted to a site, thus allowing resources to run there\&.
.sp
The loss\-policy attribute specifies what happens to the resource (or resources) if the ticket is revoked\&. The default is either stop or demote depending on whether a resource is multi\-state\&.
.sp
See also the site set of commands\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_ticket <id> <ticket_id>: <rsc>[:<role>] [<rsc>[:<role>] \&.\&.\&.]
  [loss\-policy=<loss_policy_action>]

loss_policy_action :: stop | demote | fence | freeze
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_ticket ticket\-A_public\-ip ticket\-A: public\-ip
rsc_ticket ticket\-A_bigdb ticket\-A: bigdb loss\-policy=fence
rsc_ticket ticket\-B_storage ticket\-B: drbd\-a:Master drbd\-b:Master
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBproperty\fR
.RS 4
.sp
Set the cluster (crm_config) options\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
property [$id=<set_id>] [rule \&.\&.\&.] <option>=<value> [<option>=<value> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
property stonith\-enabled=true
property rule date spec years=2014 stonith\-enabled=false
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrsc_defaults\fR
.RS 4
.sp
Set defaults for the resource meta attributes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_defaults [$id=<set_id>] [rule \&.\&.\&.] <option>=<value> [<option>=<value> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
rsc_defaults failure\-timeout=3m
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfencing_topology\fR
.RS 4
.sp
If multiple fencing (stonith) devices are available capable of fencing a node, their order may be specified by fencing_topology\&. The order is specified per node\&.
.sp
Stonith resources can be separated by , in which case all of them need to succeed\&. If they fail, the next stonith resource (or set of resources) is used\&. In other words, use comma to separate resources which all need to succeed and whitespace for serial order\&. It is not allowed to use whitespace around comma\&.
.sp
If the node is left out, the order is used for all nodes\&. That should reduce the configuration size in some stonith setups\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
fencing_topology stonith_resources [stonith_resources \&.\&.\&.]
fencing_topology fencing_order [fencing_order \&.\&.\&.]

fencing_order :: <node>: stonith_resources [stonith_resources \&.\&.\&.]

stonith_resources :: <rsc>[,<rsc>\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
fencing_topology poison\-pill power
fencing_topology \e
    node\-a: poison\-pill power
    node\-b: ipmi serial
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrole\fR
.RS 4
.sp
An ACL role is a set of rules which describe access rights to CIB\&. Rules consist of an access right read, write, or deny and a specification denoting part of the configuration to which the access right applies\&. The specification can be an XPath or a combination of tag and id references\&. If an attribute is appended, then the specification applies only to that attribute of the matching element\&.
.sp
There is a number of shortcuts for XPath specifications\&. The meta, params, and utilization shortcuts reference resource meta attributes, parameters, and utilization respectively\&. The location may be used to specify location constraints most of the time to allow resource move and unmove commands\&. The property references cluster properties\&. The node allows reading node attributes\&. nodeattr and nodeutil reference node attributes and node capacity (utilization)\&. The status shortcut references the whole status section of the CIB\&. Read access to status is necessary for various monitoring tools such as crm_mon(8) (aka crm status)\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
role <role\-id> rule [rule \&.\&.\&.]

rule :: acl\-right cib\-spec [attribute:<attribute>]

acl\-right :: read | write | deny

cib\-spec :: xpath\-spec | tag\-ref\-spec
xpath\-spec :: xpath:<xpath> | shortcut
tag\-ref\-spec :: tag:<tag> | ref:<id> | tag:<tag> ref:<id>

shortcut :: meta:<rsc>[:<attr>]
        params:<rsc>[:<attr>]
        utilization:<rsc>
        location:<rsc>
        property[:<attr>]
        node[:<node>]
        nodeattr[:<attr>]
        nodeutil[:<node>]
        status
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
role app1_admin \e
    write meta:app1:target\-role \e
    write meta:app1:is\-managed \e
    write location:app1 \e
    read ref:app1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBuser\fR
.RS 4
.sp
Users which normally cannot view or manage cluster configuration can be allowed access to parts of the CIB\&. The access is defined by a set of read, write, and deny rules as in role definitions or by referencing roles\&. The latter is considered best practice\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
user <uid> {roles|rules}

roles :: role:<role\-ref> [role:<role\-ref> \&.\&.\&.]
rules :: rule [rule \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
user joe \e
    role:app1_admin \e
    role:read_all
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBacl_target\fR
.RS 4
.sp
Defines an ACL target\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
acl_target <tid> [<role> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
acl_target joe resource_admin constraint_editor
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBacl_group\fR
.RS 4
.sp
Defines an ACL group\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
acl_group <gid> [<role> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
acl_group hacluster operator
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBop_defaults\fR
.RS 4
.sp
Set defaults for the operations meta attributes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
op_defaults [$id=<set_id>] [rule \&.\&.\&.] <option>=<value> [<option>=<value> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
op_defaults record\-pending=true
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBtag\fR
.RS 4
.sp
Define a resource tag\&. A tag is an id referring to one or more resources, without implying any constraints between the tagged resources\&. This can be useful for grouping conceptually related resources\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
tag <tag\-name>: <rsc> [<rsc> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
tag web: p\-webserver p\-vip
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBschema\fR
.RS 4
.sp
CIB\(cqs content is validated by a RNG schema\&. Pacemaker supports several, depending on version\&. At least the following schemas are accepted by crmsh:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pacemaker\-1\&.0
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pacemaker\-1\&.1
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pacemaker\-1\&.2
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pacemaker\-1\&.3
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
pacemaker\-2\&.0
.RE
.sp
Use this command to display or switch to another RNG schema\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
schema [<schema>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
schema pacemaker\-1\&.1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
The show command displays objects\&. It may display all objects or a set of objects\&. The user may also choose to see only objects which were changed\&.
.sp
Optionally, the XML code may be displayed instead of the CLI representation by passing xml as the first argument\&.
.sp
To show all objects of a certain type, use the type: prefix\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show [xml] [<id> \&.\&.\&.]
show [xml] changed
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
show webapp
show type:primitive
show xml type:node
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBedit\fR
.RS 4
.sp
This command invokes the editor with the object description\&. As with the show command, the user may choose to edit all objects or a set of objects\&.
.sp
If the user insists, he or she may edit the XML edition of the object\&. If you do that, don\(cqt modify any id attributes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
edit [xml] [<id> \&.\&.\&.]
edit [xml] changed
.fi
.if n \{\
.RE
.\}
\fBNote on renaming element ids\fR
.sp
The edit command sometimes cannot properly handle modifying element ids\&. In particular for elements which belong to group or ms resources\&. Group and ms resources themselves also cannot be renamed\&. Please use the rename command instead\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBfilter\fR
.RS 4
.sp
This command filters the given CIB elements through an external program\&. The program should accept input on stdin and send output to stdout (the standard UNIX filter conventions)\&. As with the show command, the user may choose to filter all or just a subset of elements\&.
.sp
It is possible to filter the XML representation of objects, but probably not as useful as the configuration language\&. The presentation is somewhat different from what would be displayed by the show command\-\-\-each element is shown on a single line, i\&.e\&. there are no backslashes and no other embelishments\&.
.sp
Don\(cqt forget to put quotes around the filter if it contains spaces\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
filter <prog> [xml] [<id> \&.\&.\&.]
filter <prog> [xml] changed
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
filter "sed \*(Aq/^primitive/s/target\-role=[^ ]*//\*(Aq"
# crm configure filter "sed \*(Aq/^primitive/s/target\-role=[^ ]*//\*(Aq"
crm configure <<END
  filter "sed \*(Aq/threshold=\e"1\e"/s/=\e"1\e"/=\e"0\e"/g\*(Aq"
END
.fi
.if n \{\
.RE
.\}
\fBNote on quotation marks\fR
.sp
Filter commands which feature a blend of quotation marks can be difficult to get right, especially when used directly from bash, since bash does its own quotation parsing\&. In these cases, it can be easier to supply the filter command as standard input\&. See the last example above\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdelete\fR
.RS 4
.sp
Delete one or more objects\&. If an object to be deleted belongs to a container object, such as a group, and it is the only resource in that container, then the container is deleted as well\&. Any related constraints are removed as well\&.
.sp
If the object is a started resource, it will not be deleted unless the \-\-force flag is passed to the command, or the force option is set\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
delete [\-\-force] <id> [<id>\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdefault-timeouts\fR
.RS 4
.sp
This command takes the timeouts from the actions section of the resource agent meta\-data and sets them for the operations of the primitive\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
default\-timeouts <id> [<id>\&.\&.\&.]
.fi
.if n \{\
.RE
.\}
\fBNote on default\-timeouts\fR
.sp
You may be happy using this, but your applications may not\&. And it will tell you so at the worst possible moment\&. You have been warned\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrename\fR
.RS 4
.sp
Rename an object\&. It is recommended to use this command to rename a resource, because it will take care of updating all related constraints and a parent resource\&. Changing ids with the edit command won\(cqt have the same effect\&.
.sp
If you want to rename a resource, it must be in the stopped state\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
rename <old_id> <new_id>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBmodgroup\fR
.RS 4
.sp
Add or remove primitives in a group\&. The add subcommand appends the new group member by default\&. Should it go elsewhere, there are after and before clauses\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
modgroup <id> add <id> [after <id>|before <id>]
modgroup <id> remove <id>
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
modgroup share1 add storage2 before share1\-fs
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrefresh\fR
.RS 4
.sp
Refresh the internal structures from the CIB\&. All changes made during this session are lost\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
refresh
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBerase\fR
.RS 4
.sp
The erase clears all configuration\&. Apart from nodes\&. To remove nodes, you have to specify an additional keyword nodes\&.
.sp
Note that removing nodes from the live cluster may have some strange/interesting/unwelcome effects\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
erase [nodes]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBptest (simulate)\fR
.RS 4
.sp
Show PE (Policy Engine) motions using ptest(8) or crm_simulate(8)\&.
.sp
A CIB is constructed using the current user edited configuration and the status from the running CIB\&. The resulting CIB is run through ptest (or crm_simulate) to show changes which would happen if the configuration is committed\&.
.sp
The status section may be loaded from another source and modified using the cibstatus level commands\&. In that case, the ptest command will issue a message informing the user that the Policy Engine graph is not calculated based on the current status section and therefore won\(cqt show what would happen to the running but some imaginary cluster\&.
.sp
If you have graphviz installed and X11 session, dotty(1) is run to display the changes graphically\&.
.sp
Add a string of v characters to increase verbosity\&. ptest can also show allocation scores\&. utilization turns on information about the remaining capacity of nodes\&. With the actions option, ptest will print all resource actions\&.
.sp
The ptest program has been replaced by crm_simulate in newer Pacemaker versions\&. In some installations both could be installed\&. Use simulate to enfore using crm_simulate\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
ptest [nograph] [v\&.\&.\&.] [scores] [actions] [utilization]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
ptest scores
ptest vvvvv
simulate actions
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrsctest\fR
.RS 4
.sp
Test resources with current resource configuration\&. If no nodes are specified, tests are run on all known nodes\&.
.sp
The order of resources is significant: it is assumed that later resources depend on earlier ones\&.
.sp
If a resource is multi\-state, it is assumed that the role on which later resources depend is master\&.
.sp
Tests are run sequentially to prevent running the same resource on two or more nodes\&. Tests are carried out only if none of the specified nodes currently run any of the specified resources\&. However, it won\(cqt verify whether resources run on the other nodes\&.
.sp
Superuser privileges are obviously required: either run this as root or setup the sudoers file appropriately\&.
.sp
Note that resource testing may take some time\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
rsctest <rsc_id> [<rsc_id> \&.\&.\&.] [<node_id> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
rsctest my_ip websvc
rsctest websvc nodeB
.fi
.if n \{\
.RE
.\}
.RE
.SS "cib (shadow CIBs)"
.sp
This level is for management of shadow CIBs\&. It is available at the configure level to enable saving intermediate changes to a shadow CIB instead of to the live cluster\&. This short excerpt shows how:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)configure# cib new test\-2
INFO: test\-2 shadow CIB created
crm(test\-2)configure# commit
.fi
.if n \{\
.RE
.\}
.sp
Note how the current CIB in the prompt changed from live to test\-2 after issuing the cib new command\&. See also the CIB shadow management for more information\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcibstatus\fR
.RS 4
.sp
Enter edit and manage the CIB status section level\&. See the CIB status management section\&.
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBtemplate\fR
.RS 4
.sp
The specified template is loaded into the editor\&. It\(cqs up to the user to make a good CRM configuration out of it\&. See also the template section\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
template [xml] url
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
template two\-apaches\&.txt
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBcommit\fR
.RS 4
.sp
Commit the current configuration to the CIB in use\&. As noted elsewhere, commands in a configure session don\(cqt have immediate effect on the CIB\&. All changes are applied at one point in time, either using commit or when the user leaves the configure level\&. In case the CIB in use changed in the meantime, presumably by somebody else, the crm shell will refuse to apply the changes\&.
.sp
If you know that it\(cqs fine to still apply them, add force to the command line\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
commit [force]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBverify\fR
.RS 4
.sp
Verify the contents of the CIB which would be committed\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
verify
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBupgrade\fR
.RS 4
.sp
If you get the CIB not supported error, which typically means that the current CIB version is coming from the older release, you may try to upgrade it to the latest revision\&. The command to perform the upgrade is:
.sp
.if n \{\
.RS 4
.\}
.nf
# cibadmin \-\-upgrade \-\-force
.fi
.if n \{\
.RE
.\}
.sp
If we don\(cqt recognize the current CIB as the old one, but you\(cqre sure that it is, you may force the command\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
upgrade [force]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsave\fR
.RS 4
.sp
Save the current configuration to a file\&. Optionally, as XML\&. Use \- instead of file name to write the output to stdout\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
save [xml] <file>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
save myfirstcib\&.txt
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBload\fR
.RS 4
.sp
Load a part of configuration (or all of it) from a local file or a network URL\&. The replace method replaces the current configuration with the one from the source\&. The update tries to import the contents into the current configuration\&. The file may be a CLI file or an XML file\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
load [xml] <method> URL

method :: replace | update
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
load xml update myfirstcib\&.xml
load xml replace http://storage\&.big\&.com/cibs/bigcib\&.xml
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBgraph\fR
.RS 4
.sp
Create a graphviz graphical layout from the current cluster configuration\&.
.sp
Currently, only dot (directed graph) is supported\&. It is essentially a visualization of resource ordering\&.
.sp
The graph may be saved to a file which can be used as source for various graphviz tools (by default it is displayed in the user\(cqs X11 session)\&. Optionally, by specifying the format, one can also produce an image instead\&.
.sp
For more or different graphviz attributes, it is possible to save the default set of attributes to an ini file\&. If this file exists it will always override the builtin settings\&. The exportsettings subcommand also prints the location of the ini file\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
graph [<gtype> [<file> [<img_format>]]]
graph exportsettings

gtype :: dot
img_format :: `dot` output format (see the +\-T+ option)
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
graph dot
graph dot clu1\&.conf\&.dot
graph dot clu1\&.conf\&.svg svg
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBxml\fR
.RS 4
.sp
Even though we promissed no xml, it may happen, but hopefully very very seldom, that an element from the CIB cannot be rendered in the configuration language\&. In that case, the element will be shown as raw xml, prefixed by this command\&. That element can then be edited like any other\&. If the shell finds out that after the change it can digest it, then it is going to be converted into the normal configuration language\&. Otherwise, there is no need to use xml for configuration\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
xml <xml>
.fi
.if n \{\
.RE
.\}
.RE
.SS "template"
.sp
User may be assisted in the cluster configuration by templates prepared in advance\&. Templates consist of a typical ready configuration which may be edited to suit particular user needs\&.
.sp
This command enters a template level where additional commands for configuration/template management are available\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnew\fR
.RS 4
.sp
Create a new configuration from one or more templates\&. Note that configurations and templates are kept in different places, so it is possible to have a configuration name equal a template name\&.
.sp
If you already know which parameters are required, you can set them directly on the command line\&.
.sp
The parameter name id is set by default to the name of the configuration\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
new <config> <template> [<template> \&.\&.\&.] [params name=value \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
new vip virtual\-ip
new bigfs ocfs2 params device=/dev/sdx8 directory=/bigfs
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBload\fR
.RS 4
.sp
Load an existing configuration\&. Further edit, show, and apply commands will refer to this configuration\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
load <config>
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBedit\fR
.RS 4
.sp
Edit current or given configuration using your favourite editor\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
edit [<config>]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdelete\fR
.RS 4
.sp
Remove a configuration\&. The loaded (active) configuration may be removed by force\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
delete <config> [force]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlist\fR
.RS 4
.sp
List existing configurations or templates\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
list [templates]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBapply\fR
.RS 4
.sp
Copy the current or given configuration to the current CIB\&. By default, the CIB is replaced, unless the method is set to "update"\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
apply [<method>] [<config>]

method :: replace | update
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Process the current or given configuration and display the result\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show [<config>]
.fi
.if n \{\
.RE
.\}
.RE
.SS "cibstatus"
.sp
The status section of the CIB keeps the current status of nodes and resources\&. It is modified \fIonly\fR on events, i\&.e\&. when some resource operation is run or node status changes\&. For obvious reasons, the CRM has no user interface with which it is possible to affect the status section\&. From the user\(cqs point of view, the status section is essentially a read\-only part of the CIB\&. The current status is never even written to disk, though it is available in the PE (Policy Engine) input files which represent the history of cluster motions\&. The current status may be read using the cibadmin \-Q command\&.
.sp
It may sometimes be of interest to see how status changes would affect the Policy Engine\&. The set of \(oqcibstatus` level commands allow the user to load status sections from various sources and then insert or modify resource operations or change nodes\(cq state\&.
.sp
The effect of those changes may then be observed by running the ptest command at the configure level or simulate and run commands at this level\&. The ptest runs with the user edited CIB whereas the latter two commands run with the CIB which was loaded along with the status section\&.
.sp
The simulate and run commands as well as all status modification commands are implemented using crm_simulate(8)\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBload\fR
.RS 4
.sp
Load a status section from a file, a shadow CIB, or the running cluster\&. By default, the current (live) status section is modified\&. Note that if the live status section is modified it is not going to be updated if the cluster status changes, because that would overwrite the user changes\&. To make crm drop changes and resume use of the running cluster status, run load live\&.
.sp
All CIB shadow configurations contain the status section which is a snapshot of the status section taken at the time the shadow was created\&. Obviously, this status section doesn\(cqt have much to do with the running cluster status, unless the shadow CIB has just been created\&. Therefore, the ptest command by default uses the running cluster status section\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
load {<file>|shadow:<cib>|live}
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
load bug\-12299\&.xml
load shadow:test1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsave\fR
.RS 4
.sp
The current internal status section with whatever modifications were performed can be saved to a file or shadow CIB\&.
.sp
If the file exists and contains a complete CIB, only the status section is going to be replaced and the rest of the CIB will remain intact\&. Otherwise, the current user edited configuration is saved along with the status section\&.
.sp
Note that all modifications are saved in the source file as soon as they are run\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
save [<file>|shadow:<cib>]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
save bug\-12299\&.xml
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBorigin\fR
.RS 4
.sp
Show the origin of the status section currently in use\&. This essentially shows the latest load argument\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
origin
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Show the current status section in the XML format\&. Brace yourself for some unreadable output\&. Add changed option to get a human readable output of all changes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show [changed]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnode\fR
.RS 4
.sp
Change the node status\&. It is possible to throw a node out of the cluster, make it a member, or set its state to unclean\&.
.PP
online
.RS 4
Set the
node_statecrmd
attribute to
online
and the
expected
and
join
attributes to
member\&. The effect is that the node becomes a cluster member\&.
.RE
.PP
offline
.RS 4
Set the
node_statecrmd
attribute to
offline
and the
expected
attribute to empty\&. This makes the node cleanly removed from the cluster\&.
.RE
.PP
unclean
.RS 4
Set the
node_statecrmd
attribute to
offline
and the
expected
attribute to
member\&. In this case the node has unexpectedly disappeared\&.
.RE
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
node <node> {online|offline|unclean}
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
node xen\-b unclean
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBop\fR
.RS 4
.sp
Edit the outcome of a resource operation\&. This way you can tell CRM that it ran an operation and that the resource agent returned certain exit code\&. It is also possible to change the operation\(cqs status\&. In case the operation status is set to something other than done, the exit code is effectively ignored\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
op <operation> <resource> <exit_code> [<op_status>] [<node>]

operation :: probe | monitor[:<n>] | start | stop |
   promote | demote | notify | migrate_to | migrate_from
exit_code :: <rc> | success | generic | args |
   unimplemented | perm | installed | configured | not_running |
   master | failed_master
op_status :: pending | done | cancelled | timeout | notsupported | error

n :: the monitor interval in seconds; if omitted, the first
   recurring operation is referenced
rc :: numeric exit code in range 0\&.\&.9
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
op start d1 xen\-b generic
op start d1 xen\-b 1
op monitor d1 xen\-b not_running
op stop d1 xen\-b 0 timeout
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBquorum\fR
.RS 4
.sp
Set the quorum value\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
quorum <bool>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
quorum false
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBticket\fR
.RS 4
.sp
Modify the ticket status\&. Tickets can be granted and revoked\&. Granted tickets could be activated or put in standby\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
ticket <ticket> {grant|revoke|activate|standby}
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
ticket ticketA grant
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrun\fR
.RS 4
.sp
Run the policy engine with the edited status section\&.
.sp
Add a string of v characters to increase verbosity\&. Specify scores to see allocation scores also\&. utilization turns on information about the remaining capacity of nodes\&.
.sp
If you have graphviz installed and X11 session, dotty(1) is run to display the changes graphically\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
run [nograph] [v\&.\&.\&.] [scores] [utilization]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
run
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsimulate\fR
.RS 4
.sp
Run the policy engine with the edited status section and simulate the transition\&.
.sp
Add a string of v characters to increase verbosity\&. Specify scores to see allocation scores also\&. utilization turns on information about the remaining capacity of nodes\&.
.sp
If you have graphviz installed and X11 session, dotty(1) is run to display the changes graphically\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
simulate [nograph] [v\&.\&.\&.] [scores] [utilization]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
simulate
.fi
.if n \{\
.RE
.\}
.RE
.SS "assist"
.sp
The assist sublevel is a collection of helper commands that create or modify resources and constraints, to simplify the creation of certain configurations\&.
.sp
For more information on individual commands, see the help text for those commands\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBweak-bond\fR
.RS 4
.sp
A colocation between a group of resources says that the resources should be located together, but it also means that those resources are dependent on each other\&. If one of the resources fails, the others will be restarted\&.
.sp
If this is not desired, it is possible to circumvent: By placing the resources in a non\-sequential set and colocating the set with a dummy resource which is not monitored, the resources will be placed together but will have no further dependency on each other\&.
.sp
This command creates both the constraint and the dummy resource needed for such a colocation\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
weak\-bond resource\-1 resource\-2
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBtemplate\fR
.RS 4
.sp
This command takes a list of primitives as argument, and creates a new rsc_template for these primitives\&. It can only do this if the primitives do not already share a template and are of the same type\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
template primitive\-1 primitive\-2 primitive\-3
.fi
.if n \{\
.RE
.\}
.RE
.SS "history"
.sp
Examining Pacemaker\(cqs history is a particularly involved task\&. The number of subsystems to be considered, the complexity of the configuration, and the set of various information sources, most of which are not exactly human readable, keep analyzing resource or node problems accessible to only the most knowledgeable\&. Or, depending on the point of view, to the most persistent\&. The following set of commands has been devised in hope to make cluster history more accessible\&.
.sp
Of course, looking at \fIall\fR history could be time consuming regardless of how good tools at hand are\&. Therefore, one should first say which period he or she wants to analyze\&. If not otherwise specified, the last hour is considered\&. Logs and other relevant information is collected using hb_report\&. Since this process takes some time and we always need fresh logs, information is refreshed in a much faster way using pssh(1)\&. If python\-pssh is not found on the system, examining live cluster is still possible though not as comfortable\&.
.sp
Apart from examining live cluster, events may be retrieved from a report generated by hb_report (see also the \-H option)\&. In that case we assume that the period stretching the whole report needs to be investigated\&. Of course, it is still possible to further reduce the time range\&.
.sp
If you think you may have found a bug or just need clarification from developers or your support, the session pack command can help create a report\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
crm(live)history# timeframe "Jul 18 12:00" "Jul 18 12:30"
crm(live)history# session save strange_restart
crm(live)history# session pack
Report saved in \&.\&.\&./strange_restart\&.tar\&.bz2
crm(live)history#
.fi
.if n \{\
.RE
.\}
.sp
In order to reduce report size and allow developers to concentrate on the issue, you should beforehand limit the time frame\&. Giving a meaningful session name helps too\&.
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBinfo\fR
.RS 4
.sp
The info command provides a summary of the information source, which can be either a live cluster snapshot or a previously generated report\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
info
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
info
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlatest\fR
.RS 4
.sp
The latest command shows a bit of recent history, more precisely whatever happened since the last cluster change (the latest transition)\&. If the transition is running, the shell will first wait until it finishes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
latest
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
latest
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlimit (timeframe)\fR
.RS 4
.sp
All history commands look at events within certain period\&. It defaults to the last hour for the live cluster source\&. There is no limit for the hb_report source\&. Use this command to set the timeframe\&.
.sp
The time period is parsed by the dateutil python module\&. It covers wide range of date formats\&. For instance:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
3:00 (today at 3am)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
15:00 (today at 3pm)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
2010/9/1 2pm (September 1st 2010 at 2pm)
.RE
.sp
We won\(cqt bother to give definition of the time specification in usage below\&. Either use common sense or read the dateutil documentation\&.
.sp
If dateutil is not available, then the time is parsed using strptime and only the kind as printed by date(1) is allowed:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Tue Sep 15 20:46:27 CEST 2010
.RE
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
limit [<from_time> [<to_time>]]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
limit 10:15
limit 15h22m 16h
limit "Sun 5 20:46" "Sun 5 22:00"
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsource\fR
.RS 4
.sp
Events to be examined can come from the current cluster or from a hb_report report\&. This command sets the source\&. source live sets source to the running cluster and system logs\&. If no source is specified, the current source information is printed\&.
.sp
In case a report source is specified as a file reference, the file is going to be unpacked in place where it resides\&. This directory is not removed on exit\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
source [<dir>|<file>|live]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
source live
source /tmp/customer_case_22\&.tar\&.bz2
source /tmp/customer_case_22
source
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBrefresh\fR
.RS 4
.sp
This command makes sense only for the live source and makes crm collect the latest logs and other relevant information from the logs\&. If you want to make a completely new report, specify force\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
refresh [force]
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdetail\fR
.RS 4
.sp
How much detail to show from the logs\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
detail <detail_level>

detail_level :: small integer (defaults to 0)
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
detail 1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsetnodes\fR
.RS 4
.sp
In case the host this program runs on is not part of the cluster, it is necessary to set the list of nodes\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
setnodes node <node> [<node> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
setnodes node_a node_b
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBresource\fR
.RS 4
.sp
Show actions and any failures that happened on all specified resources on all nodes\&. Normally, one gives resource names as arguments, but it is also possible to use extended regular expressions\&. Note that neither groups nor clones or master/slave names are ever logged\&. The resource command is going to expand all of these appropriately, so that clone instances or resources which are part of a group are shown\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
resource <rsc> [<rsc> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
resource bigdb public_ip
resource my_\&.*_db2
resource ping_clone
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBnode\fR
.RS 4
.sp
Show important events that happened on a node\&. Important events are node lost and join, standby and online, and fence\&. Use either node names or extended regular expressions\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
node <node> [<node> \&.\&.\&.]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
node node1
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBlog\fR
.RS 4
.sp
Show messages logged on one or more nodes\&. Leaving out a node name produces combined logs of all nodes\&. Messages are sorted by time and, if the terminal emulations supports it, displayed in different colours depending on the node to allow for easier reading\&.
.sp
The sorting key is the timestamp as written by syslog which normally has the maximum resolution of one second\&. Obviously, messages generated by events which share the same timestamp may not be sorted in the same way as they happened\&. Such close events may actually happen fairly often\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
log [<node> [<node> \&.\&.\&.] ]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
log node\-a
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBexclude\fR
.RS 4
.sp
If a log is infested with irrelevant messages, those messages may be excluded by specifying a regular expression\&. The regular expressions used are Python extended\&. This command is additive\&. To drop all regular expressions, use exclude clear\&. Run exclude only to see the current list of regular expressions\&. Excludes are saved along with the history sessions\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
exclude [<regex>|clear]
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
exclude kernel\&.*ocfs2
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBpeinputs\fR
.RS 4
.sp
Every event in the cluster results in generating one or more Policy Engine (PE) files\&. These files describe future motions of resources\&. The files are listed as full paths in the current report directory\&. Add v to also see the creation time stamps\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
peinputs [{<range>|<number>} \&.\&.\&.] [v]

range :: <n1>:<n2>
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
peinputs
peinputs 440:444 446
peinputs v
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBtransition\fR
.RS 4
.sp
This command will print actions planned by the PE and run graphviz (dotty) to display a graphical representation of the transition\&. Of course, for the latter an X11 session is required\&. This command invokes ptest(8) in background\&.
.sp
The showdot subcommand runs graphviz (dotty) to display a graphical representation of the \&.dot file which has been included in the report\&. Essentially, it shows the calculation produced by pengine which is installed on the node where the report was produced\&. In optimal case this output should not differ from the one produced by the locally installed pengine\&.
.sp
The log subcommand shows the full log for the duration of the transition\&.
.sp
A transition can also be saved to a CIB shadow for further analysis or use with cib or configure commands (use the save subcommand)\&. The shadow file name defaults to the name of the PE input file\&.
.sp
If the PE input file number is not provided, it defaults to the last one, i\&.e\&. the last transition\&. The last transition can also be referenced with number 0\&. If the number is negative, then the corresponding transition relative to the last one is chosen\&.
.sp
If there are warning and error PE input files or different nodes were the DC in the observed timeframe, it may happen that PE input file numbers collide\&. In that case provide some unique part of the path to the file\&.
.sp
After the ptest output, logs about events that happened during the transition are printed\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
transition [<number>|<index>|<file>] [nograph] [v\&.\&.\&.] [scores] [actions] [utilization]
transition showdot [<number>|<index>|<file>]
transition log [<number>|<index>|<file>]
transition save [<number>|<index>|<file> [name]]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
transition
transition 444
transition \-1
transition pe\-error\-3\&.bz2
transition node\-a/pengine/pe\-input\-2\&.bz2
transition showdot 444
transition log
transition save 0 enigma\-22
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBshow\fR
.RS 4
.sp
Every transition is saved as a PE file\&. Use this command to render that PE file either as configuration or status\&. The configuration output is the same as crm configure show\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
show <pe> [status]

pe :: <number>|<index>|<file>|live
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
show 2066
show pe\-input\-2080\&.bz2 status
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBgraph\fR
.RS 4
.sp
Create a graphviz graphical layout from the PE file (the transition)\&. Every transition contains the cluster configuration which was active at the time\&. See also generate a directed graph from configuration\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
graph <pe> [<gtype> [<file> [<img_format>]]]

gtype :: dot
img_format :: `dot` output format (see the +\-T+ option)
.fi
.if n \{\
.RE
.\}
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
graph \-1
graph 322 dot clu1\&.conf\&.dot
graph 322 dot clu1\&.conf\&.svg svg
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBdiff\fR
.RS 4
.sp
A transition represents a change in cluster configuration or state\&. Use diff to see what has changed between two transitions\&.
.sp
If you want to specify the current cluster configuration and status, use the string live\&.
.sp
Normally, the first transition specified should be the one which is older, but we are not going to enforce that\&.
.sp
Note that a single configuration update may result in more than one transition\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
diff <pe> <pe> [status] [html]

pe :: <number>|<index>|<file>|live
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
diff 2066 2067
diff pe\-input\-2080\&.bz2 live status
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBwdiff\fR
.RS 4
.sp
A transition represents a change in cluster configuration or state\&. Use wdiff to see what has changed between two transitions as word differences on a line\-by\-line basis\&.
.sp
If you want to specify the current cluster configuration and status, use the string live\&.
.sp
Normally, the first transition specified should be the one which is older, but we are not going to enforce that\&.
.sp
Note that a single configuration update may result in more than one transition\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
wdiff <pe> <pe> [status]

pe :: <number>|<index>|<file>|live
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
wdiff 2066 2067
wdiff pe\-input\-2080\&.bz2 live status
.fi
.if n \{\
.RE
.\}
.RE
.sp
.it 1 an-trap
.nr an-no-space-flag 1
.nr an-break-flag 1
.br
.ps +1
\fBsession\fR
.RS 4
.sp
Sometimes you may want to get back to examining a particular history period or bug report\&. In order to make that easier, the current settings can be saved and later retrieved\&.
.sp
If the current history being examined is coming from a live cluster the logs, PE inputs, and other files are saved too, because they may disappear from nodes\&. For the existing reports coming from hb_report, only the directory location is saved (not to waste space)\&.
.sp
A history session may also be packed into a tarball which can then be sent to support\&.
.sp
Leave out subcommand to see the current session\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
session [{save|load|delete} <name> | pack [<name>] | update | list]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
session save bnc966622
session load rsclost\-2
session list
.fi
.if n \{\
.RE
.\}
.RE
.SS "report"
.sp
Interface to a tool for creating a cluster report\&. A report is an archive containing log files, configuration files, system information and other relevant data for a given time period\&. This is a useful tool for collecting data to attach to bug reports, or for detecting the root cause of errors resulting in resource failover, for example\&.
.sp
See crmsh_hb_report(8) for more details on arguments, or call crm report \-h
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
report \-f {time|"cts:"testnum} [\-t time] [\-u user] [\-l file]
       [\-n nodes] [\-E files] [\-p patt] [\-L patt] [\-e prog]
       [\-MSDZAVsvhd] [dest]
.fi
.if n \{\
.RE
.\}
.sp
Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
report \-f 2pm report_1
report \-f "2007/9/5 12:30" \-t "2007/9/5 14:00" report_2
report \-f 1:00 \-t 3:00 \-l /var/log/cluster/ha\-debug report_3
report \-f "09sep07 2:00" \-u hbadmin report_4
report \-f 18:00 \-p "usern\&.*" \-p "admin\&.*" report_5
report \-f cts:133 ctstest_133
.fi
.if n \{\
.RE
.\}
.SS "end (cd, up)"
.sp
The end command ends the current level and the user moves to the parent level\&. This command is available everywhere\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
end
.fi
.if n \{\
.RE
.\}
.SS "help"
.sp
The help command prints help for the current level or for the specified topic (command)\&. This command is available everywhere\&.
.sp
Usage:
.sp
.if n \{\
.RS 4
.\}
.nf
help [<topic>]
.fi
.if n \{\
.RE
.\}
.SS "quit (exit, bye)"
.sp
Leave the program\&.
.SH "BUGS"
.sp
Even though all sensible configurations (and most of those that are not) are going to be supported by the crm shell, I suspect that it may still happen that certain XML constructs may confuse the tool\&. When that happens, please file a bug report\&.
.sp
The crm shell will not try to update the objects it does not understand\&. Of course, it is always possible to edit such objects in the XML format\&.
.SH "AUTHORS"
.sp
Dejan Muhamedagic, <dejan@suse\&.de> Kristoffer Gronlund <kgronlund@suse\&.com> and many OTHERS
.SH "SEE ALSO"
.sp
crm_resource(8), crm_attribute(8), crm_mon(8), cib_shadow(8), ptest(8), dotty(1), crm_simulate(8), cibadmin(8)
.SH "COPYING"
.sp
Copyright (C) 2008\-2013 Dejan Muhamedagic\&. Copyright (C) 2013 Kristoffer Gronlund\&.
.sp
Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.
